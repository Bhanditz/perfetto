/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*******************************************************************************
 * AUTOGENERATED - DO NOT EDIT
 *******************************************************************************
 * This file has been generated from the protobuf message
 * perfetto/ipc/tracing_session_state.proto
 * by
 * ../../tools/proto_to_cpp/proto_to_cpp.cc.
 * If you need to make changes here, change the .proto file and then run
 * ./tools/gen_tracing_cpp_headers_from_protos.py
 */

#ifndef INCLUDE_PERFETTO_TRACING_CORE_TRACING_SESSION_STATE_H_
#define INCLUDE_PERFETTO_TRACING_CORE_TRACING_SESSION_STATE_H_

#include <stdint.h>
#include <string>
#include <type_traits>
#include <vector>

// Forward declarations for protobuf types.
namespace perfetto {
namespace protos {
class TracingSessionState;
}
}  // namespace perfetto

namespace perfetto {

class TracingSessionState {
 public:
  enum State {
    DISABLED = 0,
    ENABLED = 1,
  };
  enum DisabledReason {
    ERROR = 0,
    TIME_LIMIT_REACHED = 1,
    FILE_SIZE_LIMIT_REACHED = 2,
    EXPLICIT_REQUEST = 3,
  };
  TracingSessionState();
  ~TracingSessionState();
  TracingSessionState(TracingSessionState&&) noexcept;
  TracingSessionState& operator=(TracingSessionState&&);
  TracingSessionState(const TracingSessionState&);
  TracingSessionState& operator=(const TracingSessionState&);

  // Conversion methods from/to the corresponding protobuf types.
  void FromProto(const perfetto::protos::TracingSessionState&);
  void ToProto(perfetto::protos::TracingSessionState*) const;

  State state() const { return state_; }
  void set_state(State value) { state_ = value; }

  DisabledReason disabled_reason() const { return disabled_reason_; }
  void set_disabled_reason(DisabledReason value) { disabled_reason_ = value; }

 private:
  State state_ = {};
  DisabledReason disabled_reason_ = {};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;
};

}  // namespace perfetto
#endif  // INCLUDE_PERFETTO_TRACING_CORE_TRACING_SESSION_STATE_H_
