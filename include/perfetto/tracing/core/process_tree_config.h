/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*******************************************************************************
 * AUTOGENERATED - DO NOT EDIT
 *******************************************************************************
 * This file has been generated from the protobuf message
 * perfetto/config/process_tree/process_tree_config.proto
 * by
 * ../../tools/proto_to_cpp/proto_to_cpp.cc.
 * If you need to make changes here, change the .proto file and then run
 * ./tools/gen_tracing_cpp_headers_from_protos.py
 */

#ifndef INCLUDE_PERFETTO_TRACING_CORE_PROCESS_TREE_CONFIG_H_
#define INCLUDE_PERFETTO_TRACING_CORE_PROCESS_TREE_CONFIG_H_

#include <stdint.h>
#include <string>
#include <type_traits>
#include <vector>

#include "perfetto/base/export.h"

// Forward declarations for protobuf types.
namespace perfetto {
namespace protos {
class ProcessTreeConfig;
}
}  // namespace perfetto

namespace perfetto {

class PERFETTO_EXPORT ProcessTreeConfig {
 public:
  enum Flags {
    DEFAULT = 0,
    DISABLE_INITIAL_DUMP = 1,
    DISABLE_ON_DEMAND = 2,
  };
  ProcessTreeConfig();
  ~ProcessTreeConfig();
  ProcessTreeConfig(ProcessTreeConfig&&) noexcept;
  ProcessTreeConfig& operator=(ProcessTreeConfig&&);
  ProcessTreeConfig(const ProcessTreeConfig&);
  ProcessTreeConfig& operator=(const ProcessTreeConfig&);

  // Conversion methods from/to the corresponding protobuf types.
  void FromProto(const perfetto::protos::ProcessTreeConfig&);
  void ToProto(perfetto::protos::ProcessTreeConfig*) const;

  int flags_size() const { return static_cast<int>(flags_.size()); }
  const std::vector<Flags>& flags() const { return flags_; }
  Flags* add_flags() {
    flags_.emplace_back();
    return &flags_.back();
  }

 private:
  std::vector<Flags> flags_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;
};

}  // namespace perfetto
#endif  // INCLUDE_PERFETTO_TRACING_CORE_PROCESS_TREE_CONFIG_H_
