/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";
option optimize_for = LITE_RUNTIME;

import "perfetto/trace_processor/query.proto";

package perfetto.protos;

// This is the interface that allows to make high-level queries on scheduling
// events.

service Sched {
  rpc GetSchedEvents(Query) returns (SchedEvents) {}
  rpc GetQuantizedSched(Query) returns (QuantizedSchedActivity) {}
}

message SchedEvents {
  // TODO: might need to review this and make it columnar, something like:
  // repeated int32 pids = 1
  // repeated int32 tids = 2
  // ...
  repeated SchedEvent events = 1;
}

message SchedEvent {
  optional int32 pid = 1;
  optional int32 tid = 2;
  optional string process_name = 3;
  optional string thread_name = 4;
  optional double timestamp = 5;
  optional double duration = 6;
  optional double cycles = 7;

  enum SchedReason {
    PREEMPTED = 1;
    BLOCKED_ON_IO = 2;
  };
  optional SchedReason reason = 8;
}

message QuantizedSchedActivity {
  message TimeSlice {
    optional double timestamp = 1;
    optional double duration = 2;
    repeated SchedEvent events = 3;
  }
  repeated TimeSlice slices = 1;
}
