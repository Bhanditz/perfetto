/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";
option optimize_for = LITE_RUNTIME;

import "perfetto/common/trace_stats.proto";
import "perfetto/config/trace_config.proto";
import "perfetto/trace/android/android_log.proto";
import "perfetto/trace/chrome/chrome_trace_event.proto";
import "perfetto/trace/clock_snapshot.proto";
import "perfetto/trace/event/debug_annotations.proto";
import "perfetto/trace/event/process_descriptor.proto";
import "perfetto/trace/event/tasks.proto";
import "perfetto/trace/event/thread_descriptor.proto";
import "perfetto/trace/event/trace_event.proto";
import "perfetto/trace/filesystem/inode_file_map.proto";
import "perfetto/trace/ftrace/ftrace_event_bundle.proto";
import "perfetto/trace/ftrace/ftrace_stats.proto";
import "perfetto/trace/power/battery_counters.proto";
import "perfetto/trace/power/power_rails.proto";
import "perfetto/trace/profiling/profile_packet.proto";
import "perfetto/trace/ps/process_stats.proto";
import "perfetto/trace/ps/process_tree.proto";
import "perfetto/trace/sys_stats/sys_stats.proto";
import "perfetto/trace/test_event.proto";

package perfetto.protos;

// The root object emitted by Perfetto. A perfetto trace is just a stream of
// TracePacket(s).
//
// Next reserved id: 12 (up to 32).
// Next id: 45 (up to 999).
// Next interning field id: 1004.
message TracePacket {
  // TODO(primiano): in future we should add a timestamp_clock_domain field to
  // allow mixing timestamps from different clock domains.
  optional uint64 timestamp = 8;  // Timestamp [ns].

  oneof data {
    FtraceEventBundle ftrace_events = 1;
    ProcessTree process_tree = 2;
    ProcessStats process_stats = 9;
    InodeFileMap inode_file_map = 4;
    ChromeEventBundle chrome_events = 5;
    ClockSnapshot clock_snapshot = 6;
    SysStats sys_stats = 7;
    TraceEvent trace_event = 11;

    // IDs up to 32 are reserved. IDs up to 15 take only one byte to encode
    // their preamble so should be used for freqeuent events.

    TraceConfig trace_config = 33;
    FtraceStats ftrace_stats = 34;
    TraceStats trace_stats = 35;
    ProfilePacket profile_packet = 37;
    BatteryCounters battery = 38;
    PowerRails power_rails = 40;
    AndroidLogPacket android_log = 39;
    ProcessDescriptor process_descriptor = 43;
    ThreadDescriptor thread_descriptor = 44;

    // This field is emitted at periodic intervals (~10s) and
    // contains always the binary representation of the UUID
    // {82477a76-b28d-42ba-81dc-33326d57a079}. This is used to be able to
    // efficiently partition long traces without having to fully parse them.
    bytes synchronization_marker = 36;

    // This field is only used for testing.
    TestEvent for_testing = 268435455;  // 2^28 - 1, max field id for protos.
  }

  // Trusted user id of the producer which generated this packet. Keep in sync
  // with TrustedPacket.trusted_uid.
  //
  // TODO(eseckler): Emit this field in a PacketSequenceDescriptor message
  // instead.
  oneof optional_trusted_uid { int32 trusted_uid = 3; };

  // Service-assigned identifier of the packet sequence this packet belongs to.
  // Uniquely identifies a producer + writer pair within the tracing session. A
  // value of zero denotes an invalid ID. Keep in sync with
  // TrustedPacket.trusted_packet_sequence_id.
  oneof optional_trusted_packet_sequence_id {
    uint32 trusted_packet_sequence_id = 10;
  }

  // ----------------------------- DATA INTERNING: -----------------------------
  // Interning indexes are built up gradually by adding the entries contained in
  // each TracePacket of the same packet sequence (packets emitted by the same
  // producer and TraceWriter, see |trusted_packet_sequence_id|).
  //
  // The writer will emit new entries when it encounters new internable values
  // that aren't yet in the index. Data in this and subsequent TracePackets can
  // then refer to the entry by its position (interning ID, abbreviated "iid")
  // in its index.
  //
  // Because of the incremental build-up, the interning index will be corrupted
  // when TracePackets are lost, e.g. because a chunk was overridden in the
  // central ring buffer. To avoid invalidation of the whole trace in such a
  // case, the index is periodically reset (see |reset_interning_state|). The
  // reader will only lose interning data for packets after a "hole" in the
  // sequence (see |missing_packets_on_sequence|) up to the next reset.
  // ---------------------------------------------------------------------------

  // Set to true when the writer invalidates previously emitted interning state.
  // This TracePacket and subsequent TracePackets will not refer to any
  // interning entry emitted before this TracePacket without re-emitting the
  // entry.
  //
  // When the reader detects packet loss (|missing_packets_on_sequence|), it
  // needs to skip packets in the sequence until the next one with this flag
  // set.
  optional bool reset_interning_state = 41;

  // Flag set by the service if this packet does not immediately follow the last
  // packet from the writer sequence that the consumer read. This can happen if
  // chunks in the trace buffer are overridden before the consumer can read
  // them.
  optional bool missing_packets_on_sequence = 42;

  // Interned data entries:
  //
  // The writer will emit new entries in the same TracePacket that first refers
  // to them (since the last reset of interning state). The messages in each of
  // these fields need to specify an |interning_id| field, which is the ID of
  // the entry in the field's interning index. Each field constructs its own
  // index, thus interning IDs are scoped to the tracing session and field
  // (usually as a counter for efficient var-int encoding).
  //
  // We use field IDs from 1000 to identify these fields for generic
  // reconstruction of the interning indexes in the trace processor.
  repeated EventCategory event_categories = 1000;
  repeated LegacyEventName legacy_event_names = 1001;
  repeated DebugAnnotationName debug_annotation_names = 1002;
  repeated SourceLocation source_locations = 1003;
}
