#!/usr/bin/env python
# Copyright (C) 2017 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import json
import sys
import argparse

#    "//base:base_unittests": {
#        "all_dependent_configs": [
#            "//buildtools:googletest_config"
#        ],
#        "allow_circular_includes_from": [],
#        "asmflags": [
#        ],
#        "cflags": [
#        ],
#        "cflags_cc": [
#        ],
#        "check_includes": true,
#        "configs": [
#          // Not defined anywhere? Map some known ones like googletest_config.
#        ],
#        "defines": [
#          // Whitelist these.
#        ],
#        "deps": [
#          // Walk these recursively.
#        ],
#        "include_dirs": [
#          // Allow repo-relative paths.
#        ],
#        "ldflags": [
#          // Shouldn't need any of these.
#        ],
#        "lib_dirs": [
#          // Ditto.
#        ],
#        "libs": [
#          // Whitelist?
#        ],
#        "outputs": [
#          // Map to cc_binary / cc_binary_host
#        ],
#        "public": "*",
#        "sources": [
#          // Drop headers.
#        ],
#        "testonly": true,  // Ignore.
#        // Use to determine if this is host or target.
#        "toolchain": "//build/toolchain:gcc_like",
#        "type": "executable",  // cc_binary / cc_binary_host
#        "visibility": [
#          // Ignore.
#        ]
#    },
#

class Error(Exception):
    pass


def indent(n):
    return '    ' * n


class Module(object):
    def __init__(self, type):
        self.type = type

    def to_string(self, output):
        output.append('%s {' % self.type)
        output.append('}')


class Blueprint(object):
    def __init__(self):
        self.modules = []

    def add_module(self, module):
        self.modules.append(module)

    def to_string(self, output):
        for m in self.modules:
            m.to_string(output)


def create_module_from_target(desc, target_name):
    target = desc[target_name]
    if target['type'] == 'executable':
        module_type = 'cc_binary_host' if 'host' in target['toolchain'] else 'cc_binary'
    else:
        raise Error('Unknown target type: %s' % target['type'])
    module = Module(module_type)
    return module


def main():
    parser = argparse.ArgumentParser(
          description='Generate Android.bp from a GN description.')
    parser.add_argument('desc',
          help='GN description (e.g., gn desc out "//*" --all-toolchains --format json)')
    args = parser.parse_args()

    with open(args.desc) as f:
        desc = json.load(f)

    blueprint = Blueprint()
    target = "//base:base_unittests"
    blueprint.add_module(create_module_from_target(desc, target))

    output = []
    blueprint.to_string(output)
    print '\n'.join(output)


if __name__ == '__main__':
    sys.exit(main())
