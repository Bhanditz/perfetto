/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

////////////////////////////////////////////////////////////////////////////////
// TODO: this should be autogenerated
////////////////////////////////////////////////////////////////////////////////

#include "greeter_service.pb.h"

#include "protorpc/src/test/greeter_service-gen.h"

#include "protorpc/basic_types.h"
#include "protorpc/service_descriptor.h"

#include <memory>

using ::perfetto::protorpc::ServiceDescriptor;

namespace protorpc_test {

namespace {

ServiceDescriptor* CreateDescriptor() {
  ServiceDescriptor* desc = new ServiceDescriptor();
  desc->service_name = "Greeter";

  // rpc SayHello(GreeterRequest) returns (GreeterReply) {}
  desc->methods.emplace_back(ServiceDescriptor::Method{
      /* method_name */ "SayHello",
      /* decoder */
      [](const std::string& proto_data) {
        std::unique_ptr<::protorpc_test::GreeterRequest> proto_obj(
            new ::protorpc_test::GreeterRequest());
        std::unique_ptr<::perfetto::protorpc::ProtoMessage> result;
        if (proto_obj->ParseFromString(proto_data))
          result.reset(proto_obj.release());
        return result;
      },
      /* new_reply_obj */
      []() {
        return std::unique_ptr<::perfetto::protorpc::ProtoMessage>(
            new ::protorpc_test::GreeterReply());
      },
      /* function */
      reinterpret_cast<ServiceDescriptor::Method::MethodPtr>(
          &Greeter::Service::SayHello)});

  // rpc WaveGoodBye(GreeterRequest) returns (GreeterReply) {}
  desc->methods.emplace_back(ServiceDescriptor::Method{
      /* method_name */ "WaveGoodBye",
      /* decoder */
      [](const std::string& proto_data) {
        std::unique_ptr<::protorpc_test::GreeterRequest> proto_obj(
            new ::protorpc_test::GreeterRequest());
        std::unique_ptr<::perfetto::protorpc::ProtoMessage> result;
        if (proto_obj->ParseFromString(proto_data))
          result.reset(proto_obj.release());
        return result;
      },
      /* new_reply_obj */
      []() {
        return std::unique_ptr<::perfetto::protorpc::ProtoMessage>(
            new ::protorpc_test::GreeterReply());
      },
      /* function */
      reinterpret_cast<ServiceDescriptor::Method::MethodPtr>(
          &Greeter::Service::WaveGoodBye)});

  return desc;
}

}  // namespace

// static
const ServiceDescriptor& Greeter::GetDescriptor() {
  static ServiceDescriptor* lazily_initialized_descriptor = CreateDescriptor();
  return *lazily_initialized_descriptor;
}

// Service methods.
Greeter::Service::~Service() = default;

const ServiceDescriptor& Greeter::Service::GetDescriptor() {
  return Greeter::GetDescriptor();
}

// ServiceProxy methods.
Greeter::ServiceProxy::~ServiceProxy() = default;

const ServiceDescriptor& Greeter::ServiceProxy::GetDescriptor() {
  return Greeter::GetDescriptor();
}

void Greeter::ServiceProxy::SayHello(GreeterRequest* req,
                                     GreeterReplyCallback callback) {
  BeginInvoke<GreeterReply>("SayHello", req, std::move(callback));
}

void Greeter::ServiceProxy::WaveGoodBye(GreeterRequest* req,
                                        GreeterReplyCallback callback) {
  BeginInvoke<GreeterReply>("WaveGoodBye", req, std::move(callback));
}

}  // namespace protorpc_test
