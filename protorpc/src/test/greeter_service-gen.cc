/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

////////////////////////////////////////////////////////////////////////////////
// TODO: this should be autogenerated
////////////////////////////////////////////////////////////////////////////////

#include "greeter_service.pb.h"

#include "protorpc/src/test/greeter_service-gen.h"

#include "protorpc/basic_types.h"
#include "protorpc/service_descriptor.h"

#include <memory>

using ::perfetto::protorpc::ServiceDescriptor;

namespace protorpc_test {

namespace {

template <typename T>
using _Deferred = ::perfetto::protorpc::Deferred<T>;
using _ProtoMessage = ::perfetto::protorpc::ProtoMessage;

// A templated protobuf message decoder. Returns nullptr in case of failure.
template <typename T>
std::unique_ptr<_ProtoMessage> Decoder(const std::string& proto_data) {
  std::unique_ptr<_ProtoMessage> msg(new T());
  if (msg->ParseFromString(proto_data))
    return msg;
  return nullptr;
}

template <typename T>
std::unique_ptr<_ProtoMessage> Factory() {
  return std::unique_ptr<_ProtoMessage>(new T());
}

template <typename TSvc,
          typename TReq,
          typename TReply,
          void (TSvc::*Method)(const TReq&, _Deferred<TReply>)>

void Invoker(::perfetto::protorpc::Service* s,
             const _ProtoMessage& req,
             _Deferred<_ProtoMessage> reply) {
  (*static_cast<TSvc*>(s).*Method)(static_cast<const TReq&>(req),
                                   reply.template As<TReply>());
}

ServiceDescriptor* CreateDescriptor() {
  ServiceDescriptor* desc = new ServiceDescriptor();
  desc->service_name = "Greeter";

  // rpc SayHello(GreeterRequestMsg) returns (GreeterReplyMsg) {}
  desc->methods.emplace_back(ServiceDescriptor::Method{
      "SayHello", &Decoder<::protorpc_test::GreeterRequestMsg>,
      &Decoder<::protorpc_test::GreeterReplyMsg>,
      &Factory<::protorpc_test::GreeterReplyMsg>,
      &Invoker<Greeter, ::protorpc_test::GreeterRequestMsg,
               ::protorpc_test::GreeterReplyMsg, &Greeter::SayHello>});

  desc->methods.emplace_back(ServiceDescriptor::Method{
      "WaveGoodbye", &Decoder<::protorpc_test::GreeterRequestMsg>,
      &Decoder<::protorpc_test::GreeterReplyMsg>,
      &Factory<::protorpc_test::GreeterReplyMsg>,
      &Invoker<Greeter, ::protorpc_test::GreeterRequestMsg,
               ::protorpc_test::GreeterReplyMsg, &Greeter::WaveGoodbye>});
  return desc;
}

const ServiceDescriptor& GetDescriptorLazy() {
  static ServiceDescriptor* lazily_initialized_descriptor = CreateDescriptor();
  return *lazily_initialized_descriptor;
}

}  // namespace

Greeter::~Greeter() = default;

const ServiceDescriptor& Greeter::GetDescriptor() {
  return GetDescriptorLazy();
}

GreeterProxy::~GreeterProxy() = default;

const ServiceDescriptor& GreeterProxy::GetDescriptor() {
  return GetDescriptorLazy();
}

void GreeterProxy::SayHello(const GreeterRequestMsg& request,
                            DeferredGreeterReply reply) {
  ::perfetto::protorpc::ServiceProxy::BeginInvoke<GreeterReplyMsg>(
      "SayHello", request, std::move(reply));
}

void GreeterProxy::WaveGoodbye(const GreeterRequestMsg& request,
                               DeferredGreeterReply reply) {
  ::perfetto::protorpc::ServiceProxy::BeginInvoke<GreeterReplyMsg>(
      "WaveGoodbye", request, std::move(reply));
}

}  // namespace protorpc_test
