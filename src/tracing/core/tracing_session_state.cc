/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*******************************************************************************
 * AUTOGENERATED - DO NOT EDIT
 *******************************************************************************
 * This file has been generated from the protobuf message
 * perfetto/ipc/tracing_session_state.proto
 * by
 * ../../tools/proto_to_cpp/proto_to_cpp.cc.
 * If you need to make changes here, change the .proto file and then run
 * ./tools/gen_tracing_cpp_headers_from_protos.py
 */

#include "perfetto/tracing/core/tracing_session_state.h"

#include "perfetto/ipc/tracing_session_state.pb.h"

namespace perfetto {

TracingSessionState::TracingSessionState() = default;
TracingSessionState::~TracingSessionState() = default;
TracingSessionState::TracingSessionState(const TracingSessionState&) = default;
TracingSessionState& TracingSessionState::operator=(
    const TracingSessionState&) = default;
TracingSessionState::TracingSessionState(TracingSessionState&&) noexcept =
    default;
TracingSessionState& TracingSessionState::operator=(TracingSessionState&&) =
    default;

void TracingSessionState::FromProto(
    const perfetto::protos::TracingSessionState& proto) {
  static_assert(sizeof(state_) == sizeof(proto.state()), "size mismatch");
  state_ = static_cast<decltype(state_)>(proto.state());

  static_assert(sizeof(disabled_reason_) == sizeof(proto.disabled_reason()),
                "size mismatch");
  disabled_reason_ =
      static_cast<decltype(disabled_reason_)>(proto.disabled_reason());
  unknown_fields_ = proto.unknown_fields();
}

void TracingSessionState::ToProto(
    perfetto::protos::TracingSessionState* proto) const {
  proto->Clear();

  static_assert(sizeof(state_) == sizeof(proto->state()), "size mismatch");
  proto->set_state(static_cast<decltype(proto->state())>(state_));

  static_assert(sizeof(disabled_reason_) == sizeof(proto->disabled_reason()),
                "size mismatch");
  proto->set_disabled_reason(
      static_cast<decltype(proto->disabled_reason())>(disabled_reason_));
  *(proto->mutable_unknown_fields()) = unknown_fields_;
}

}  // namespace perfetto
