// Autogenerated by:
// ../../tools/ftrace_proto_gen/ftrace_proto_gen.cc
// Do not edit.

#include "src/ftrace_reader/event_info.h"

namespace perfetto {

std::vector<Event> GetStaticEventInfo() {
  std::vector<Event> events;
  {
    Event* event = AddEvent(&events, "binder_lock", "binder", 53);
    AddField(event, "tag", 1, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "binder_locked", "binder", 54);
    AddField(event, "tag", 1, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "binder_set_priority", "binder", 52);
    AddField(event, "proc", 1, kProtoInt32);
    AddField(event, "thread", 2, kProtoInt32);
    AddField(event, "old_prio", 3, kProtoUint32);
    AddField(event, "new_prio", 4, kProtoUint32);
    AddField(event, "desired_prio", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "binder_transaction", "binder", 50);
    AddField(event, "debug_id", 1, kProtoInt32);
    AddField(event, "target_node", 2, kProtoInt32);
    AddField(event, "to_proc", 3, kProtoInt32);
    AddField(event, "to_thread", 4, kProtoInt32);
    AddField(event, "reply", 5, kProtoInt32);
    AddField(event, "code", 6, kProtoUint32);
    AddField(event, "flags", 7, kProtoUint32);
  }

  {
    Event* event =
        AddEvent(&events, "binder_transaction_received", "binder", 51);
    AddField(event, "debug_id", 1, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "binder_unlock", "binder", 55);
    AddField(event, "tag", 1, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_bio_backmerge", "block", 115);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "rwbs", 4, kProtoString);
    AddField(event, "comm", 5, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_bio_bounce", "block", 116);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "rwbs", 4, kProtoString);
    AddField(event, "comm", 5, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_bio_complete", "block", 117);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "error", 4, kProtoInt32);
    AddField(event, "rwbs", 5, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_bio_frontmerge", "block", 118);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "rwbs", 4, kProtoString);
    AddField(event, "comm", 5, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_bio_queue", "block", 119);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "rwbs", 4, kProtoString);
    AddField(event, "comm", 5, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_bio_remap", "block", 120);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "old_dev", 4, kProtoUint64);
    AddField(event, "old_sector", 5, kProtoUint64);
    AddField(event, "rwbs", 6, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_dirty_buffer", "block", 121);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "size", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "block_getrq", "block", 122);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "rwbs", 4, kProtoString);
    AddField(event, "comm", 5, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_plug", "block", 123);
    AddField(event, "comm", 1, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_rq_abort", "block", 124);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "errors", 4, kProtoInt32);
    AddField(event, "rwbs", 5, kProtoString);
    AddField(event, "cmd", 6, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_rq_complete", "block", 125);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "errors", 4, kProtoInt32);
    AddField(event, "rwbs", 5, kProtoString);
    AddField(event, "cmd", 6, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_rq_insert", "block", 126);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "bytes", 4, kProtoUint32);
    AddField(event, "rwbs", 5, kProtoString);
    AddField(event, "comm", 6, kProtoString);
    AddField(event, "cmd", 7, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_rq_issue", "block", 45);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "bytes", 4, kProtoUint32);
    AddField(event, "rwbs", 5, kProtoString);
    AddField(event, "comm", 6, kProtoString);
    AddField(event, "cmd", 7, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_rq_remap", "block", 128);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "old_dev", 4, kProtoUint64);
    AddField(event, "old_sector", 5, kProtoUint64);
    AddField(event, "nr_bios", 6, kProtoUint32);
    AddField(event, "rwbs", 7, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_rq_requeue", "block", 129);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "errors", 4, kProtoInt32);
    AddField(event, "rwbs", 5, kProtoString);
    AddField(event, "cmd", 6, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_sleeprq", "block", 130);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "nr_sector", 3, kProtoUint32);
    AddField(event, "rwbs", 4, kProtoString);
    AddField(event, "comm", 5, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_split", "block", 131);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "new_sector", 3, kProtoUint64);
    AddField(event, "rwbs", 4, kProtoString);
    AddField(event, "comm", 5, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "block_touch_buffer", "block", 132);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "sector", 2, kProtoUint64);
    AddField(event, "size", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "block_unplug", "block", 133);
    AddField(event, "nr_rq", 1, kProtoInt32);
    AddField(event, "comm", 2, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "cgroup_attach_task", "cgroup", 67);
    AddField(event, "dst_root", 1, kProtoInt32);
    AddField(event, "dst_id", 2, kProtoInt32);
    AddField(event, "pid", 3, kProtoInt32);
    AddField(event, "comm", 4, kProtoString);
    AddField(event, "cname", 5, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "cgroup_destroy_root", "cgroup", 72);
    AddField(event, "root", 1, kProtoInt32);
    AddField(event, "ss_mask", 2, kProtoUint32);
    AddField(event, "name", 3, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "cgroup_mkdir", "cgroup", 68);
    AddField(event, "root", 1, kProtoInt32);
    AddField(event, "id", 2, kProtoInt32);
    AddField(event, "cname", 3, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "cgroup_release", "cgroup", 73);
    AddField(event, "root", 1, kProtoInt32);
    AddField(event, "id", 2, kProtoInt32);
    AddField(event, "cname", 3, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "cgroup_remount", "cgroup", 69);
    AddField(event, "root", 1, kProtoInt32);
    AddField(event, "ss_mask", 2, kProtoUint32);
    AddField(event, "name", 3, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "cgroup_rename", "cgroup", 74);
    AddField(event, "root", 1, kProtoInt32);
    AddField(event, "id", 2, kProtoInt32);
    AddField(event, "cname", 3, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "cgroup_rmdir", "cgroup", 70);
    AddField(event, "root", 1, kProtoInt32);
    AddField(event, "id", 2, kProtoInt32);
    AddField(event, "cname", 3, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "cgroup_setup_root", "cgroup", 75);
    AddField(event, "root", 1, kProtoInt32);
    AddField(event, "ss_mask", 2, kProtoUint32);
    AddField(event, "name", 3, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "cgroup_transfer_tasks", "cgroup", 71);
    AddField(event, "dst_root", 1, kProtoInt32);
    AddField(event, "dst_id", 2, kProtoInt32);
    AddField(event, "pid", 3, kProtoInt32);
    AddField(event, "comm", 4, kProtoString);
    AddField(event, "cname", 5, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "mm_compaction_begin", "compaction", 99);
    AddField(event, "zone_start", 1, kProtoUint64);
    AddField(event, "migrate_pfn", 2, kProtoUint64);
    AddField(event, "free_pfn", 3, kProtoUint64);
    AddField(event, "zone_end", 4, kProtoUint64);
    AddField(event, "sync", 5, kProtoUint32);
  }

  {
    Event* event =
        AddEvent(&events, "mm_compaction_defer_compaction", "compaction", 100);
    AddField(event, "nid", 1, kProtoInt32);
    AddField(event, "idx", 2, kProtoUint32);
    AddField(event, "order", 3, kProtoInt32);
    AddField(event, "considered", 4, kProtoUint32);
    AddField(event, "defer_shift", 5, kProtoUint32);
    AddField(event, "order_failed", 6, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "mm_compaction_defer_reset", "compaction", 102);
    AddField(event, "nid", 1, kProtoInt32);
    AddField(event, "idx", 2, kProtoUint32);
    AddField(event, "order", 3, kProtoInt32);
    AddField(event, "considered", 4, kProtoUint32);
    AddField(event, "defer_shift", 5, kProtoUint32);
    AddField(event, "order_failed", 6, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "mm_compaction_deferred", "compaction", 101);
    AddField(event, "nid", 1, kProtoInt32);
    AddField(event, "idx", 2, kProtoUint32);
    AddField(event, "order", 3, kProtoInt32);
    AddField(event, "considered", 4, kProtoUint32);
    AddField(event, "defer_shift", 5, kProtoUint32);
    AddField(event, "order_failed", 6, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "mm_compaction_end", "compaction", 103);
    AddField(event, "zone_start", 1, kProtoUint64);
    AddField(event, "migrate_pfn", 2, kProtoUint64);
    AddField(event, "free_pfn", 3, kProtoUint64);
    AddField(event, "zone_end", 4, kProtoUint64);
    AddField(event, "sync", 5, kProtoUint32);
    AddField(event, "status", 6, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "mm_compaction_finished", "compaction", 104);
    AddField(event, "nid", 1, kProtoInt32);
    AddField(event, "idx", 2, kProtoUint32);
    AddField(event, "order", 3, kProtoInt32);
    AddField(event, "ret", 4, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "mm_compaction_isolate_freepages", "compaction", 105);
    AddField(event, "start_pfn", 1, kProtoUint64);
    AddField(event, "end_pfn", 2, kProtoUint64);
    AddField(event, "nr_scanned", 3, kProtoUint64);
    AddField(event, "nr_taken", 4, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "mm_compaction_isolate_migratepages",
                            "compaction", 106);
    AddField(event, "start_pfn", 1, kProtoUint64);
    AddField(event, "end_pfn", 2, kProtoUint64);
    AddField(event, "nr_scanned", 3, kProtoUint64);
    AddField(event, "nr_taken", 4, kProtoUint64);
  }

  {
    Event* event =
        AddEvent(&events, "mm_compaction_kcompactd_sleep", "compaction", 107);
    AddField(event, "nid", 1, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "mm_compaction_kcompactd_wake", "compaction", 108);
    AddField(event, "nid", 1, kProtoInt32);
    AddField(event, "order", 2, kProtoInt32);
    AddField(event, "classzone_idx", 3, kProtoUint32);
  }

  {
    Event* event =
        AddEvent(&events, "mm_compaction_migratepages", "compaction", 109);
    AddField(event, "nr_migrated", 1, kProtoUint64);
    AddField(event, "nr_failed", 2, kProtoUint64);
  }

  {
    Event* event =
        AddEvent(&events, "mm_compaction_suitable", "compaction", 110);
    AddField(event, "nid", 1, kProtoInt32);
    AddField(event, "idx", 2, kProtoUint32);
    AddField(event, "order", 3, kProtoInt32);
    AddField(event, "ret", 4, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "mm_compaction_try_to_compact_pages",
                            "compaction", 111);
    AddField(event, "order", 1, kProtoInt32);
    AddField(event, "gfp_mask", 2, kProtoUint32);
    AddField(event, "mode", 3, kProtoUint32);
  }

  {
    Event* event =
        AddEvent(&events, "mm_compaction_wakeup_kcompactd", "compaction", 112);
    AddField(event, "nid", 1, kProtoInt32);
    AddField(event, "order", 2, kProtoInt32);
    AddField(event, "classzone_idx", 3, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "cpufreq_interactive_already",
                            "cpufreq_interactive", 5);
    AddField(event, "cpu_id", 1, kProtoUint64);
    AddField(event, "load", 2, kProtoUint64);
    AddField(event, "curtarg", 3, kProtoUint64);
    AddField(event, "curactual", 4, kProtoUint64);
    AddField(event, "newtarg", 5, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "cpufreq_interactive_boost",
                            "cpufreq_interactive", 6);
    AddField(event, "s", 1, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "cpufreq_interactive_notyet",
                            "cpufreq_interactive", 7);
    AddField(event, "cpu_id", 1, kProtoUint64);
    AddField(event, "load", 2, kProtoUint64);
    AddField(event, "curtarg", 3, kProtoUint64);
    AddField(event, "curactual", 4, kProtoUint64);
    AddField(event, "newtarg", 5, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "cpufreq_interactive_setspeed",
                            "cpufreq_interactive", 8);
    AddField(event, "cpu_id", 1, kProtoUint32);
    AddField(event, "targfreq", 2, kProtoUint64);
    AddField(event, "actualfreq", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "cpufreq_interactive_target",
                            "cpufreq_interactive", 9);
    AddField(event, "cpu_id", 1, kProtoUint64);
    AddField(event, "load", 2, kProtoUint64);
    AddField(event, "curtarg", 3, kProtoUint64);
    AddField(event, "curactual", 4, kProtoUint64);
    AddField(event, "newtarg", 5, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "cpufreq_interactive_unboost",
                            "cpufreq_interactive", 10);
    AddField(event, "s", 1, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "ext4_alloc_da_blocks", "ext4", 134);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "data_blocks", 3, kProtoUint32);
    AddField(event, "meta_blocks", 4, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_allocate_blocks", "ext4", 135);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "block", 3, kProtoUint64);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "logical", 5, kProtoUint32);
    AddField(event, "lleft", 6, kProtoUint32);
    AddField(event, "lright", 7, kProtoUint32);
    AddField(event, "goal", 8, kProtoUint64);
    AddField(event, "pleft", 9, kProtoUint64);
    AddField(event, "pright", 10, kProtoUint64);
    AddField(event, "flags", 11, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_allocate_inode", "ext4", 136);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "dir", 3, kProtoUint64);
    AddField(event, "mode", 4, kProtoUint32);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_begin_ordered_truncate", "ext4", 137);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "new_size", 3, kProtoInt64);
  }

  {
    Event* event = AddEvent(&events, "ext4_collapse_range", "ext4", 138);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "offset", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoInt64);
  }

  {
    Event* event = AddEvent(&events, "ext4_da_release_space", "ext4", 139);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "i_blocks", 3, kProtoUint64);
    AddField(event, "freed_blocks", 4, kProtoInt32);
    AddField(event, "reserved_data_blocks", 5, kProtoInt32);
    AddField(event, "reserved_meta_blocks", 6, kProtoInt32);
    AddField(event, "allocated_meta_blocks", 7, kProtoInt32);
    AddField(event, "mode", 8, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_da_reserve_space", "ext4", 140);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "i_blocks", 3, kProtoUint64);
    AddField(event, "reserved_data_blocks", 4, kProtoInt32);
    AddField(event, "reserved_meta_blocks", 5, kProtoInt32);
    AddField(event, "mode", 6, kProtoUint32);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_da_update_reserve_space", "ext4", 141);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "i_blocks", 3, kProtoUint64);
    AddField(event, "used_blocks", 4, kProtoInt32);
    AddField(event, "reserved_data_blocks", 5, kProtoInt32);
    AddField(event, "reserved_meta_blocks", 6, kProtoInt32);
    AddField(event, "allocated_meta_blocks", 7, kProtoInt32);
    AddField(event, "quota_claim", 8, kProtoInt32);
    AddField(event, "mode", 9, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_da_write_begin", "ext4", 41);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pos", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "flags", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_da_write_end", "ext4", 42);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pos", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "copied", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_da_write_pages", "ext4", 142);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "first_page", 3, kProtoUint64);
    AddField(event, "nr_to_write", 4, kProtoInt64);
    AddField(event, "sync_mode", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_da_write_pages_extent", "ext4", 143);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoUint64);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "flags", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_direct_IO_enter", "ext4", 144);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pos", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoUint64);
    AddField(event, "rw", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_direct_IO_exit", "ext4", 145);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pos", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoUint64);
    AddField(event, "rw", 5, kProtoInt32);
    AddField(event, "ret", 6, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_discard_blocks", "ext4", 146);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "blk", 2, kProtoUint64);
    AddField(event, "count", 3, kProtoUint64);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_discard_preallocations", "ext4", 147);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "ext4_drop_inode", "ext4", 148);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "drop", 3, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_es_cache_extent", "ext4", 149);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoUint32);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "pblk", 5, kProtoUint64);
    AddField(event, "status", 6, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_es_find_delayed_extent_range_enter",
                            "ext4", 150);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_es_find_delayed_extent_range_exit",
                            "ext4", 151);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoUint32);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "pblk", 5, kProtoUint64);
    AddField(event, "status", 6, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_es_insert_extent", "ext4", 152);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoUint32);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "pblk", 5, kProtoUint64);
    AddField(event, "status", 6, kProtoUint32);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_es_lookup_extent_enter", "ext4", 153);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_es_lookup_extent_exit", "ext4", 154);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoUint32);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "pblk", 5, kProtoUint64);
    AddField(event, "status", 6, kProtoUint32);
    AddField(event, "found", 7, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_es_remove_extent", "ext4", 155);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoInt64);
  }

  {
    Event* event = AddEvent(&events, "ext4_es_shrink", "ext4", 156);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "nr_shrunk", 2, kProtoInt32);
    AddField(event, "scan_time", 3, kProtoUint64);
    AddField(event, "nr_skipped", 4, kProtoInt32);
    AddField(event, "retried", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_es_shrink_count", "ext4", 157);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "nr_to_scan", 2, kProtoInt32);
    AddField(event, "cache_cnt", 3, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_es_shrink_scan_enter", "ext4", 158);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "nr_to_scan", 2, kProtoInt32);
    AddField(event, "cache_cnt", 3, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_es_shrink_scan_exit", "ext4", 159);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "nr_shrunk", 2, kProtoInt32);
    AddField(event, "cache_cnt", 3, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_evict_inode", "ext4", 160);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "nlink", 3, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_ext_convert_to_initialized_enter", "ext4", 161);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "m_lblk", 3, kProtoUint32);
    AddField(event, "m_len", 4, kProtoUint32);
    AddField(event, "u_lblk", 5, kProtoUint32);
    AddField(event, "u_len", 6, kProtoUint32);
    AddField(event, "u_pblk", 7, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "ext4_ext_convert_to_initialized_fastpath",
                            "ext4", 162);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "m_lblk", 3, kProtoUint32);
    AddField(event, "m_len", 4, kProtoUint32);
    AddField(event, "u_lblk", 5, kProtoUint32);
    AddField(event, "u_len", 6, kProtoUint32);
    AddField(event, "u_pblk", 7, kProtoUint64);
    AddField(event, "i_lblk", 8, kProtoUint32);
    AddField(event, "i_len", 9, kProtoUint32);
    AddField(event, "i_pblk", 10, kProtoUint64);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_ext_handle_unwritten_extents", "ext4", 163);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "flags", 3, kProtoInt32);
    AddField(event, "lblk", 4, kProtoUint32);
    AddField(event, "pblk", 5, kProtoUint64);
    AddField(event, "len", 6, kProtoUint32);
    AddField(event, "allocated", 7, kProtoUint32);
    AddField(event, "newblk", 8, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "ext4_ext_in_cache", "ext4", 164);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoUint32);
    AddField(event, "ret", 4, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_ext_load_extent", "ext4", 165);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pblk", 3, kProtoUint64);
    AddField(event, "lblk", 4, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_ext_map_blocks_enter", "ext4", 166);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoUint32);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "flags", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_ext_map_blocks_exit", "ext4", 167);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "flags", 3, kProtoUint32);
    AddField(event, "pblk", 4, kProtoUint64);
    AddField(event, "lblk", 5, kProtoUint32);
    AddField(event, "len", 6, kProtoUint32);
    AddField(event, "mflags", 7, kProtoUint32);
    AddField(event, "ret", 8, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_ext_put_in_cache", "ext4", 168);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoUint32);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "start", 5, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "ext4_ext_remove_space", "ext4", 169);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "start", 3, kProtoUint32);
    AddField(event, "end", 4, kProtoUint32);
    AddField(event, "depth", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_ext_remove_space_done", "ext4", 170);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "start", 3, kProtoUint32);
    AddField(event, "end", 4, kProtoUint32);
    AddField(event, "depth", 5, kProtoInt32);
    AddField(event, "partial", 6, kProtoInt64);
    AddField(event, "eh_entries", 7, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_ext_rm_idx", "ext4", 171);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pblk", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "ext4_ext_rm_leaf", "ext4", 172);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "partial", 3, kProtoInt64);
    AddField(event, "start", 4, kProtoUint32);
    AddField(event, "ee_lblk", 5, kProtoUint32);
    AddField(event, "ee_pblk", 6, kProtoUint64);
    AddField(event, "ee_len", 7, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_ext_show_extent", "ext4", 173);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pblk", 3, kProtoUint64);
    AddField(event, "lblk", 4, kProtoUint32);
    AddField(event, "len", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_fallocate_enter", "ext4", 174);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "offset", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoInt64);
    AddField(event, "mode", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_fallocate_exit", "ext4", 175);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pos", 3, kProtoInt64);
    AddField(event, "blocks", 4, kProtoUint32);
    AddField(event, "ret", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_find_delalloc_range", "ext4", 176);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "from", 3, kProtoUint32);
    AddField(event, "to", 4, kProtoUint32);
    AddField(event, "reverse", 5, kProtoInt32);
    AddField(event, "found", 6, kProtoInt32);
    AddField(event, "found_blk", 7, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_forget", "ext4", 177);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "block", 3, kProtoUint64);
    AddField(event, "is_metadata", 4, kProtoInt32);
    AddField(event, "mode", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_free_blocks", "ext4", 178);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "block", 3, kProtoUint64);
    AddField(event, "count", 4, kProtoUint64);
    AddField(event, "flags", 5, kProtoInt32);
    AddField(event, "mode", 6, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_free_inode", "ext4", 179);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "uid", 3, kProtoUint32);
    AddField(event, "gid", 4, kProtoUint32);
    AddField(event, "blocks", 5, kProtoUint64);
    AddField(event, "mode", 6, kProtoUint32);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_get_implied_cluster_alloc_exit", "ext4", 180);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "flags", 2, kProtoUint32);
    AddField(event, "lblk", 3, kProtoUint32);
    AddField(event, "pblk", 4, kProtoUint64);
    AddField(event, "len", 5, kProtoUint32);
    AddField(event, "ret", 6, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_get_reserved_cluster_alloc", "ext4", 181);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoUint32);
    AddField(event, "len", 4, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_ind_map_blocks_enter", "ext4", 182);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "lblk", 3, kProtoUint32);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "flags", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_ind_map_blocks_exit", "ext4", 183);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "flags", 3, kProtoUint32);
    AddField(event, "pblk", 4, kProtoUint64);
    AddField(event, "lblk", 5, kProtoUint32);
    AddField(event, "len", 6, kProtoUint32);
    AddField(event, "mflags", 7, kProtoUint32);
    AddField(event, "ret", 8, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_insert_range", "ext4", 184);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "offset", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoInt64);
  }

  {
    Event* event = AddEvent(&events, "ext4_invalidatepage", "ext4", 185);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "index", 3, kProtoUint64);
    AddField(event, "offset", 4, kProtoUint32);
    AddField(event, "length", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_journal_start", "ext4", 186);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ip", 2, kProtoUint64);
    AddField(event, "blocks", 3, kProtoInt32);
    AddField(event, "rsv_blocks", 4, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_journal_start_reserved", "ext4", 187);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ip", 2, kProtoUint64);
    AddField(event, "blocks", 3, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_journalled_invalidatepage", "ext4", 188);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "index", 3, kProtoUint64);
    AddField(event, "offset", 4, kProtoUint32);
    AddField(event, "length", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_journalled_write_end", "ext4", 189);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pos", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "copied", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_load_inode", "ext4", 190);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "ext4_load_inode_bitmap", "ext4", 191);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "group", 2, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_mark_inode_dirty", "ext4", 192);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "ip", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "ext4_mb_bitmap_load", "ext4", 193);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "group", 2, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_mb_buddy_bitmap_load", "ext4", 194);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "group", 2, kProtoUint32);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_mb_discard_preallocations", "ext4", 195);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "needed", 2, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_mb_new_group_pa", "ext4", 196);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pa_pstart", 3, kProtoUint64);
    AddField(event, "pa_lstart", 4, kProtoUint64);
    AddField(event, "pa_len", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_mb_new_inode_pa", "ext4", 197);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pa_pstart", 3, kProtoUint64);
    AddField(event, "pa_lstart", 4, kProtoUint64);
    AddField(event, "pa_len", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_mb_release_group_pa", "ext4", 198);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "pa_pstart", 2, kProtoUint64);
    AddField(event, "pa_len", 3, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_mb_release_inode_pa", "ext4", 199);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "block", 3, kProtoUint64);
    AddField(event, "count", 4, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_mballoc_alloc", "ext4", 200);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "orig_logical", 3, kProtoUint32);
    AddField(event, "orig_start", 4, kProtoInt32);
    AddField(event, "orig_group", 5, kProtoUint32);
    AddField(event, "orig_len", 6, kProtoInt32);
    AddField(event, "goal_logical", 7, kProtoUint32);
    AddField(event, "goal_start", 8, kProtoInt32);
    AddField(event, "goal_group", 9, kProtoUint32);
    AddField(event, "goal_len", 10, kProtoInt32);
    AddField(event, "result_logical", 11, kProtoUint32);
    AddField(event, "result_start", 12, kProtoInt32);
    AddField(event, "result_group", 13, kProtoUint32);
    AddField(event, "result_len", 14, kProtoInt32);
    AddField(event, "found", 15, kProtoUint32);
    AddField(event, "groups", 16, kProtoUint32);
    AddField(event, "buddy", 17, kProtoUint32);
    AddField(event, "flags", 18, kProtoUint32);
    AddField(event, "tail", 19, kProtoUint32);
    AddField(event, "cr", 20, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_mballoc_discard", "ext4", 201);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "result_start", 3, kProtoInt32);
    AddField(event, "result_group", 4, kProtoUint32);
    AddField(event, "result_len", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_mballoc_free", "ext4", 202);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "result_start", 3, kProtoInt32);
    AddField(event, "result_group", 4, kProtoUint32);
    AddField(event, "result_len", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_mballoc_prealloc", "ext4", 203);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "orig_logical", 3, kProtoUint32);
    AddField(event, "orig_start", 4, kProtoInt32);
    AddField(event, "orig_group", 5, kProtoUint32);
    AddField(event, "orig_len", 6, kProtoInt32);
    AddField(event, "result_logical", 7, kProtoUint32);
    AddField(event, "result_start", 8, kProtoInt32);
    AddField(event, "result_group", 9, kProtoUint32);
    AddField(event, "result_len", 10, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_other_inode_update_time", "ext4", 204);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "orig_ino", 3, kProtoUint64);
    AddField(event, "uid", 4, kProtoUint32);
    AddField(event, "gid", 5, kProtoUint32);
    AddField(event, "mode", 6, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_punch_hole", "ext4", 205);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "offset", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoInt64);
    AddField(event, "mode", 5, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "ext4_read_block_bitmap_load", "ext4", 206);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "group", 2, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_readpage", "ext4", 207);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "index", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "ext4_releasepage", "ext4", 208);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "index", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "ext4_remove_blocks", "ext4", 209);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "from", 3, kProtoUint32);
    AddField(event, "to", 4, kProtoUint32);
    AddField(event, "partial", 5, kProtoInt64);
    AddField(event, "ee_pblk", 6, kProtoUint64);
    AddField(event, "ee_lblk", 7, kProtoUint32);
    AddField(event, "ee_len", 8, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_request_blocks", "ext4", 210);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "len", 3, kProtoUint32);
    AddField(event, "logical", 4, kProtoUint32);
    AddField(event, "lleft", 5, kProtoUint32);
    AddField(event, "lright", 6, kProtoUint32);
    AddField(event, "goal", 7, kProtoUint64);
    AddField(event, "pleft", 8, kProtoUint64);
    AddField(event, "pright", 9, kProtoUint64);
    AddField(event, "flags", 10, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_request_inode", "ext4", 211);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "dir", 2, kProtoUint64);
    AddField(event, "mode", 3, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_sync_file_enter", "ext4", 43);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "parent", 3, kProtoUint64);
    AddField(event, "datasync", 4, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_sync_file_exit", "ext4", 44);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "ret", 3, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_sync_fs", "ext4", 212);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "wait", 2, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_trim_all_free", "ext4", 213);
    AddField(event, "dev_major", 1, kProtoInt32);
    AddField(event, "dev_minor", 2, kProtoInt32);
    AddField(event, "group", 3, kProtoUint32);
    AddField(event, "start", 4, kProtoInt32);
    AddField(event, "len", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_trim_extent", "ext4", 214);
    AddField(event, "dev_major", 1, kProtoInt32);
    AddField(event, "dev_minor", 2, kProtoInt32);
    AddField(event, "group", 3, kProtoUint32);
    AddField(event, "start", 4, kProtoInt32);
    AddField(event, "len", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_truncate_enter", "ext4", 215);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "blocks", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "ext4_truncate_exit", "ext4", 216);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "blocks", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "ext4_unlink_enter", "ext4", 217);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "parent", 3, kProtoUint64);
    AddField(event, "size", 4, kProtoInt64);
  }

  {
    Event* event = AddEvent(&events, "ext4_unlink_exit", "ext4", 218);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "ret", 3, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_write_begin", "ext4", 219);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pos", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "flags", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_write_end", "ext4", 230);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "pos", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoUint32);
    AddField(event, "copied", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_writepage", "ext4", 231);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "index", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "ext4_writepages", "ext4", 232);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "nr_to_write", 3, kProtoInt64);
    AddField(event, "pages_skipped", 4, kProtoInt64);
    AddField(event, "range_start", 5, kProtoInt64);
    AddField(event, "range_end", 6, kProtoInt64);
    AddField(event, "writeback_index", 7, kProtoUint64);
    AddField(event, "sync_mode", 8, kProtoInt32);
    AddField(event, "for_kupdate", 9, kProtoUint32);
    AddField(event, "range_cyclic", 10, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ext4_writepages_result", "ext4", 233);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "ret", 3, kProtoInt32);
    AddField(event, "pages_written", 4, kProtoInt32);
    AddField(event, "pages_skipped", 5, kProtoInt64);
    AddField(event, "writeback_index", 6, kProtoUint64);
    AddField(event, "sync_mode", 7, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "ext4_zero_range", "ext4", 234);
    AddField(event, "dev", 1, kProtoUint64);
    AddField(event, "ino", 2, kProtoUint64);
    AddField(event, "offset", 3, kProtoInt64);
    AddField(event, "len", 4, kProtoInt64);
    AddField(event, "mode", 5, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "mm_filemap_add_to_page_cache", "filemap", 97);
    AddField(event, "pfn", 1, kProtoUint64);
    AddField(event, "i_ino", 2, kProtoUint64);
    AddField(event, "index", 3, kProtoUint64);
    AddField(event, "s_dev", 4, kProtoUint64);
  }

  {
    Event* event =
        AddEvent(&events, "mm_filemap_delete_from_page_cache", "filemap", 98);
    AddField(event, "pfn", 1, kProtoUint64);
    AddField(event, "i_ino", 2, kProtoUint64);
    AddField(event, "index", 3, kProtoUint64);
    AddField(event, "s_dev", 4, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "print", "ftrace", 3);
    AddField(event, "ip", 1, kProtoUint64);
    AddField(event, "buf", 2, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "i2c_read", "i2c", 27);
    AddField(event, "adapter_nr", 1, kProtoInt32);
    AddField(event, "msg_nr", 2, kProtoUint32);
    AddField(event, "addr", 3, kProtoUint32);
    AddField(event, "flags", 4, kProtoUint32);
    AddField(event, "len", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "i2c_reply", "i2c", 30);
    AddField(event, "adapter_nr", 1, kProtoInt32);
    AddField(event, "msg_nr", 2, kProtoUint32);
    AddField(event, "addr", 3, kProtoUint32);
    AddField(event, "flags", 4, kProtoUint32);
    AddField(event, "len", 5, kProtoUint32);
    AddField(event, "buf", 6, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "i2c_result", "i2c", 29);
    AddField(event, "adapter_nr", 1, kProtoInt32);
    AddField(event, "nr_msgs", 2, kProtoUint32);
    AddField(event, "ret", 3, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "i2c_write", "i2c", 28);
    AddField(event, "adapter_nr", 1, kProtoInt32);
    AddField(event, "msg_nr", 2, kProtoUint32);
    AddField(event, "addr", 3, kProtoUint32);
    AddField(event, "flags", 4, kProtoUint32);
    AddField(event, "len", 5, kProtoUint32);
    AddField(event, "buf", 6, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "smbus_read", "i2c", 31);
    AddField(event, "adapter_nr", 1, kProtoInt32);
    AddField(event, "flags", 2, kProtoUint32);
    AddField(event, "addr", 3, kProtoUint32);
    AddField(event, "command", 4, kProtoUint32);
    AddField(event, "protocol", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "smbus_reply", "i2c", 34);
    AddField(event, "adapter_nr", 1, kProtoInt32);
    AddField(event, "addr", 2, kProtoUint32);
    AddField(event, "flags", 3, kProtoUint32);
    AddField(event, "command", 4, kProtoUint32);
    AddField(event, "len", 5, kProtoUint32);
    AddField(event, "protocol", 6, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "smbus_result", "i2c", 33);
    AddField(event, "adapter_nr", 1, kProtoInt32);
    AddField(event, "addr", 2, kProtoUint32);
    AddField(event, "flags", 3, kProtoUint32);
    AddField(event, "read_write", 4, kProtoUint32);
    AddField(event, "command", 5, kProtoUint32);
    AddField(event, "res", 6, kProtoInt32);
    AddField(event, "protocol", 7, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "smbus_write", "i2c", 32);
    AddField(event, "adapter_nr", 1, kProtoInt32);
    AddField(event, "addr", 2, kProtoUint32);
    AddField(event, "flags", 3, kProtoUint32);
    AddField(event, "command", 4, kProtoUint32);
    AddField(event, "len", 5, kProtoUint32);
    AddField(event, "protocol", 6, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "ipi_entry", "ipi", 21);
    AddField(event, "reason", 1, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "ipi_exit", "ipi", 22);
    AddField(event, "reason", 1, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "ipi_raise", "ipi", 23);
    AddField(event, "target_cpus", 1, kProtoUint32);
    AddField(event, "reason", 2, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "irq_handler_entry", "irq", 36);
    AddField(event, "irq", 1, kProtoInt32);
    AddField(event, "name", 2, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "irq_handler_exit", "irq", 37);
    AddField(event, "irq", 1, kProtoInt32);
    AddField(event, "ret", 2, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "softirq_entry", "irq", 24);
    AddField(event, "vec", 1, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "softirq_exit", "irq", 25);
    AddField(event, "vec", 1, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "softirq_raise", "irq", 26);
    AddField(event, "vec", 1, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "lowmemory_kill", "lowmemorykiller", 35);
    AddField(event, "comm", 1, kProtoString);
    AddField(event, "pid", 2, kProtoInt32);
    AddField(event, "pagecache_size", 3, kProtoInt64);
    AddField(event, "pagecache_limit", 4, kProtoInt64);
    AddField(event, "free", 5, kProtoInt64);
  }

  {
    Event* event = AddEvent(&events, "mdp_cmd_kickoff", "mdss", 76);
    AddField(event, "ctl_num", 1, kProtoUint32);
    AddField(event, "kickoff_cnt", 2, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "mdp_cmd_pingpong_done", "mdss", 81);
    AddField(event, "ctl_num", 1, kProtoUint32);
    AddField(event, "intf_num", 2, kProtoUint32);
    AddField(event, "pp_num", 3, kProtoUint32);
    AddField(event, "koff_cnt", 4, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "mdp_cmd_readptr_done", "mdss", 85);
    AddField(event, "ctl_num", 1, kProtoUint32);
    AddField(event, "koff_cnt", 2, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "mdp_cmd_release_bw", "mdss", 89);
    AddField(event, "ctl_num", 1, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "mdp_cmd_wait_pingpong", "mdss", 93);
    AddField(event, "ctl_num", 1, kProtoUint32);
    AddField(event, "kickoff_cnt", 2, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "mdp_commit", "mdss", 77);
    AddField(event, "num", 1, kProtoUint32);
    AddField(event, "play_cnt", 2, kProtoUint32);
    AddField(event, "clk_rate", 3, kProtoUint32);
    AddField(event, "bandwidth", 4, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "mdp_compare_bw", "mdss", 82);
    AddField(event, "new_ab", 1, kProtoUint64);
    AddField(event, "new_ib", 2, kProtoUint64);
    AddField(event, "new_wb", 3, kProtoUint64);
    AddField(event, "old_ab", 4, kProtoUint64);
    AddField(event, "old_ib", 5, kProtoUint64);
    AddField(event, "old_wb", 6, kProtoUint64);
    AddField(event, "params_changed", 7, kProtoUint32);
    AddField(event, "update_bw", 8, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "mdp_misr_crc", "mdss", 86);
    AddField(event, "block_id", 1, kProtoUint32);
    AddField(event, "vsync_cnt", 2, kProtoUint32);
    AddField(event, "crc", 3, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "mdp_mixer_update", "mdss", 90);
    AddField(event, "mixer_num", 1, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "mdp_perf_prefill_calc", "mdss", 94);
    AddField(event, "pnum", 1, kProtoUint32);
    AddField(event, "latency_buf", 2, kProtoUint32);
    AddField(event, "ot", 3, kProtoUint32);
    AddField(event, "y_buf", 4, kProtoUint32);
    AddField(event, "y_scaler", 5, kProtoUint32);
    AddField(event, "pp_lines", 6, kProtoUint32);
    AddField(event, "pp_bytes", 7, kProtoUint32);
    AddField(event, "post_sc", 8, kProtoUint32);
    AddField(event, "fbc_bytes", 9, kProtoUint32);
    AddField(event, "prefill_bytes", 10, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "mdp_perf_set_ot", "mdss", 78);
    AddField(event, "pnum", 1, kProtoUint32);
    AddField(event, "xin_id", 2, kProtoUint32);
    AddField(event, "rd_lim", 3, kProtoUint32);
    AddField(event, "is_vbif_rt", 4, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "mdp_perf_set_panic_luts", "mdss", 83);
    AddField(event, "pnum", 1, kProtoUint32);
    AddField(event, "fmt", 2, kProtoUint32);
    AddField(event, "mode", 3, kProtoUint32);
    AddField(event, "panic_lut", 4, kProtoUint32);
    AddField(event, "robust_lut", 5, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "mdp_perf_set_qos_luts", "mdss", 87);
    AddField(event, "pnum", 1, kProtoUint32);
    AddField(event, "fmt", 2, kProtoUint32);
    AddField(event, "intf", 3, kProtoUint32);
    AddField(event, "rot", 4, kProtoUint32);
    AddField(event, "fl", 5, kProtoUint32);
    AddField(event, "lut", 6, kProtoUint32);
    AddField(event, "linear", 7, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "mdp_perf_set_wm_levels", "mdss", 91);
    AddField(event, "pnum", 1, kProtoUint32);
    AddField(event, "use_space", 2, kProtoUint32);
    AddField(event, "priority_bytes", 3, kProtoUint32);
    AddField(event, "wm0", 4, kProtoUint32);
    AddField(event, "wm1", 5, kProtoUint32);
    AddField(event, "wm2", 6, kProtoUint32);
    AddField(event, "mb_cnt", 7, kProtoUint32);
    AddField(event, "mb_size", 8, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "mdp_perf_update_bus", "mdss", 95);
    AddField(event, "client", 1, kProtoInt32);
    AddField(event, "ab_quota", 2, kProtoUint64);
    AddField(event, "ib_quota", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "mdp_sspp_change", "mdss", 79);
    AddField(event, "num", 1, kProtoUint32);
    AddField(event, "play_cnt", 2, kProtoUint32);
    AddField(event, "mixer", 3, kProtoUint32);
    AddField(event, "stage", 4, kProtoUint32);
    AddField(event, "flags", 5, kProtoUint32);
    AddField(event, "format", 6, kProtoUint32);
    AddField(event, "img_w", 7, kProtoUint32);
    AddField(event, "img_h", 8, kProtoUint32);
    AddField(event, "src_x", 9, kProtoUint32);
    AddField(event, "src_y", 10, kProtoUint32);
    AddField(event, "src_w", 11, kProtoUint32);
    AddField(event, "src_h", 12, kProtoUint32);
    AddField(event, "dst_x", 13, kProtoUint32);
    AddField(event, "dst_y", 14, kProtoUint32);
    AddField(event, "dst_w", 15, kProtoUint32);
    AddField(event, "dst_h", 16, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "mdp_sspp_set", "mdss", 84);
    AddField(event, "num", 1, kProtoUint32);
    AddField(event, "play_cnt", 2, kProtoUint32);
    AddField(event, "mixer", 3, kProtoUint32);
    AddField(event, "stage", 4, kProtoUint32);
    AddField(event, "flags", 5, kProtoUint32);
    AddField(event, "format", 6, kProtoUint32);
    AddField(event, "img_w", 7, kProtoUint32);
    AddField(event, "img_h", 8, kProtoUint32);
    AddField(event, "src_x", 9, kProtoUint32);
    AddField(event, "src_y", 10, kProtoUint32);
    AddField(event, "src_w", 11, kProtoUint32);
    AddField(event, "src_h", 12, kProtoUint32);
    AddField(event, "dst_x", 13, kProtoUint32);
    AddField(event, "dst_y", 14, kProtoUint32);
    AddField(event, "dst_w", 15, kProtoUint32);
    AddField(event, "dst_h", 16, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "mdp_trace_counter", "mdss", 88);
    AddField(event, "pid", 1, kProtoInt32);
    AddField(event, "counter_name", 2, kProtoString);
    AddField(event, "value", 3, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "mdp_video_underrun_done", "mdss", 92);
    AddField(event, "ctl_num", 1, kProtoUint32);
    AddField(event, "underrun_cnt", 2, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "rotator_bw_ao_as_context", "mdss", 96);
    AddField(event, "state", 1, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "tracing_mark_write", "mdss", 80);
    AddField(event, "pid", 1, kProtoInt32);
    AddField(event, "trace_name", 2, kProtoString);
    AddField(event, "trace_begin", 3, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "clock_disable", "power", 15);
    AddField(event, "name", 1, kProtoString);
    AddField(event, "state", 2, kProtoUint64);
    AddField(event, "cpu_id", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "clock_enable", "power", 14);
    AddField(event, "name", 1, kProtoString);
    AddField(event, "state", 2, kProtoUint64);
    AddField(event, "cpu_id", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "clock_set_rate", "power", 16);
    AddField(event, "name", 1, kProtoString);
    AddField(event, "state", 2, kProtoUint64);
    AddField(event, "cpu_id", 3, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "cpu_frequency", "power", 11);
    AddField(event, "state", 1, kProtoUint32);
    AddField(event, "cpu_id", 2, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "cpu_frequency_limits", "power", 12);
    AddField(event, "min_freq", 1, kProtoUint32);
    AddField(event, "max_freq", 2, kProtoUint32);
    AddField(event, "cpu_id", 3, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "cpu_idle", "power", 13);
    AddField(event, "state", 1, kProtoUint32);
    AddField(event, "cpu_id", 2, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "suspend_resume", "power", 113);
    AddField(event, "action", 1, kProtoString);
    AddField(event, "val", 2, kProtoInt32);
    AddField(event, "start", 3, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "regulator_disable", "regulator", 60);
    AddField(event, "name", 1, kProtoString);
  }

  {
    Event* event =
        AddEvent(&events, "regulator_disable_complete", "regulator", 61);
    AddField(event, "name", 1, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "regulator_enable", "regulator", 62);
    AddField(event, "name", 1, kProtoString);
  }

  {
    Event* event =
        AddEvent(&events, "regulator_enable_complete", "regulator", 63);
    AddField(event, "name", 1, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "regulator_enable_delay", "regulator", 64);
    AddField(event, "name", 1, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "regulator_set_voltage", "regulator", 65);
    AddField(event, "name", 1, kProtoString);
    AddField(event, "min", 2, kProtoInt32);
    AddField(event, "max", 3, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "regulator_set_voltage_complete", "regulator", 66);
    AddField(event, "name", 1, kProtoString);
    AddField(event, "val", 2, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "sched_blocked_reason", "sched", 18);
    AddField(event, "pid", 1, kProtoInt32);
    AddField(event, "caller", 2, kProtoUint64);
    AddField(event, "io_wait", 3, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "sched_cpu_hotplug", "sched", 19);
    AddField(event, "affected_cpu", 1, kProtoInt32);
    AddField(event, "error", 2, kProtoInt32);
    AddField(event, "status", 3, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "sched_process_exec", "sched", 237);
    AddField(event, "filename", 1, kProtoString);
    AddField(event, "pid", 2, kProtoInt32);
    AddField(event, "old_pid", 3, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "sched_process_exit", "sched", 238);
    AddField(event, "comm", 1, kProtoString);
    AddField(event, "pid", 2, kProtoInt32);
    AddField(event, "tgid", 3, kProtoInt32);
    AddField(event, "prio", 4, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "sched_process_fork", "sched", 239);
    AddField(event, "parent_comm", 1, kProtoString);
    AddField(event, "parent_pid", 2, kProtoInt32);
    AddField(event, "child_comm", 3, kProtoString);
    AddField(event, "child_pid", 4, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "sched_process_free", "sched", 240);
    AddField(event, "comm", 1, kProtoString);
    AddField(event, "pid", 2, kProtoInt32);
    AddField(event, "prio", 3, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "sched_process_hang", "sched", 241);
    AddField(event, "comm", 1, kProtoString);
    AddField(event, "pid", 2, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "sched_process_wait", "sched", 242);
    AddField(event, "comm", 1, kProtoString);
    AddField(event, "pid", 2, kProtoInt32);
    AddField(event, "prio", 3, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "sched_switch", "sched", 4);
    AddField(event, "prev_comm", 1, kProtoString);
    AddField(event, "prev_pid", 2, kProtoInt32);
    AddField(event, "prev_prio", 3, kProtoInt32);
    AddField(event, "prev_state", 4, kProtoInt64);
    AddField(event, "next_comm", 5, kProtoString);
    AddField(event, "next_pid", 6, kProtoInt32);
    AddField(event, "next_prio", 7, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "sched_wakeup", "sched", 17);
    AddField(event, "comm", 1, kProtoString);
    AddField(event, "pid", 2, kProtoInt32);
    AddField(event, "prio", 3, kProtoInt32);
    AddField(event, "success", 4, kProtoInt32);
    AddField(event, "target_cpu", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "sched_wakeup_new", "sched", 114);
    AddField(event, "comm", 1, kProtoString);
    AddField(event, "pid", 2, kProtoInt32);
    AddField(event, "prio", 3, kProtoInt32);
    AddField(event, "success", 4, kProtoInt32);
    AddField(event, "target_cpu", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "sched_waking", "sched", 20);
    AddField(event, "comm", 1, kProtoString);
    AddField(event, "pid", 2, kProtoInt32);
    AddField(event, "prio", 3, kProtoInt32);
    AddField(event, "success", 4, kProtoInt32);
    AddField(event, "target_cpu", 5, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "sync_pt", "sync", 38);
    AddField(event, "timeline", 1, kProtoString);
    AddField(event, "value", 2, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "sync_timeline", "sync", 39);
    AddField(event, "name", 1, kProtoString);
    AddField(event, "value", 2, kProtoString);
  }

  {
    Event* event = AddEvent(&events, "sync_wait", "sync", 40);
    AddField(event, "name", 1, kProtoString);
    AddField(event, "status", 2, kProtoInt32);
    AddField(event, "begin", 3, kProtoUint32);
  }

  {
    Event* event = AddEvent(&events, "task_newtask", "task", 235);
    AddField(event, "pid", 1, kProtoInt32);
    AddField(event, "comm", 2, kProtoString);
    AddField(event, "clone_flags", 3, kProtoUint64);
    AddField(event, "oom_score_adj", 4, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "task_rename", "task", 236);
    AddField(event, "pid", 1, kProtoInt32);
    AddField(event, "oldcomm", 2, kProtoString);
    AddField(event, "newcomm", 3, kProtoString);
    AddField(event, "oom_score_adj", 4, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "mm_vmscan_direct_reclaim_begin", "vmscan", 46);
    AddField(event, "order", 1, kProtoInt32);
    AddField(event, "may_writepage", 2, kProtoInt32);
    AddField(event, "gfp_flags", 3, kProtoUint32);
  }

  {
    Event* event =
        AddEvent(&events, "mm_vmscan_direct_reclaim_end", "vmscan", 47);
    AddField(event, "nr_reclaimed", 1, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "mm_vmscan_kswapd_sleep", "vmscan", 49);
    AddField(event, "nid", 1, kProtoInt32);
  }

  {
    Event* event = AddEvent(&events, "mm_vmscan_kswapd_wake", "vmscan", 48);
    AddField(event, "nid", 1, kProtoInt32);
    AddField(event, "order", 2, kProtoInt32);
  }

  {
    Event* event =
        AddEvent(&events, "workqueue_activate_work", "workqueue", 56);
    AddField(event, "work", 1, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "workqueue_execute_end", "workqueue", 57);
    AddField(event, "work", 1, kProtoUint64);
  }

  {
    Event* event =
        AddEvent(&events, "workqueue_execute_start", "workqueue", 58);
    AddField(event, "work", 1, kProtoUint64);
    AddField(event, "function", 2, kProtoUint64);
  }

  {
    Event* event = AddEvent(&events, "workqueue_queue_work", "workqueue", 59);
    AddField(event, "work", 1, kProtoUint64);
    AddField(event, "function", 2, kProtoUint64);
    AddField(event, "workqueue", 3, kProtoUint64);
    AddField(event, "req_cpu", 4, kProtoUint32);
    AddField(event, "cpu", 5, kProtoUint32);
  }

  return events;
}

}  // namespace perfetto
