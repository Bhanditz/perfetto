// Autogenerated by ../../tools/ftrace_proto_gen/ftrace_proto_gen.cc do not
// edit.

#include "src/ftrace_reader/event_info.h"

namespace perfetto {

std::vector<Event> GetStaticEventInfo() {
  std::vector<Event> events;

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpufreq_interactive_already";
    event->group = "cpufreq_interactive";
    event->proto_field_id = 701;
    event->fields.push_back(FieldFromNameIdType("cpu_id", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("load", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("curtarg", 3, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("curactual", 4, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("newtarg", 5, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpufreq_interactive_boost";
    event->group = "cpufreq_interactive";
    event->proto_field_id = 703;
    event->fields.push_back(FieldFromNameIdType("s", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpufreq_interactive_notyet";
    event->group = "cpufreq_interactive";
    event->proto_field_id = 702;
    event->fields.push_back(FieldFromNameIdType("cpu_id", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("load", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("curtarg", 3, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("curactual", 4, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("newtarg", 5, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpufreq_interactive_setspeed";
    event->group = "cpufreq_interactive";
    event->proto_field_id = 699;
    event->fields.push_back(FieldFromNameIdType("cpu_id", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("targfreq", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("actualfreq", 3, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpufreq_interactive_target";
    event->group = "cpufreq_interactive";
    event->proto_field_id = 700;
    event->fields.push_back(FieldFromNameIdType("cpu_id", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("load", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("curtarg", 3, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("curactual", 4, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("newtarg", 5, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpufreq_interactive_unboost";
    event->group = "cpufreq_interactive";
    event->proto_field_id = 704;
    event->fields.push_back(FieldFromNameIdType("s", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "print";
    event->group = "ftrace";
    event->proto_field_id = 5;
    event->fields.push_back(FieldFromNameIdType("ip", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("buf", 2, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "clock_disable";
    event->group = "power";
    event->proto_field_id = 125;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("state", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("cpu_id", 3, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "clock_enable";
    event->group = "power";
    event->proto_field_id = 124;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("state", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("cpu_id", 3, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "clock_set_rate";
    event->group = "power";
    event->proto_field_id = 126;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("state", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("cpu_id", 3, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpu_frequency";
    event->group = "power";
    event->proto_field_id = 116;
    event->fields.push_back(FieldFromNameIdType("state", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("cpu_id", 2, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpu_frequency_limits";
    event->group = "power";
    event->proto_field_id = 117;
    event->fields.push_back(FieldFromNameIdType("min_freq", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("max_freq", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("cpu_id", 3, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpu_idle";
    event->group = "power";
    event->proto_field_id = 114;
    event->fields.push_back(FieldFromNameIdType("state", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("cpu_id", 2, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "sched_switch";
    event->group = "sched";
    event->proto_field_id = 47;
    event->fields.push_back(FieldFromNameIdType("prev_comm", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("prev_pid", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("prev_prio", 3, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("prev_state", 4, kProtoInt64));
    event->fields.push_back(FieldFromNameIdType("next_comm", 5, kProtoString));
    event->fields.push_back(FieldFromNameIdType("next_pid", 6, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("next_prio", 7, kProtoInt32));
  }

  return events;
}

}  // namespace perfetto
