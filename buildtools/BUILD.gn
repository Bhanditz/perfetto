# Copyright (C) 2017 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/c++.gni")

import("//build/proto_library.gni")

# Mimimal config to be used in production (i.e. non-test) targets. This is
# really just to allowing include "gtest/gtest_prod.h" for the FRIEND_TEST macro
# and avoid to pull in warning suppressions that are not really necessary for
# production code.
config("googletest_prod_config") {
  visibility = [ ":*" ]
  include_dirs = [ "googletest/googletest/include" ]
}

# Config to include gtest.h in test targets.
config("googletest_config") {
  visibility = [ ":*" ]
  defines = [ "GTEST_LANG_CXX11=1" ]
  include_dirs = [
    "googletest/googletest/include",
    "googletest/googlemock/include",
  ]
  cflags = [
    "-Wno-covered-switch-default",
    "-Wno-deprecated",
    "-Wno-global-constructors",
    "-Wno-inconsistent-missing-override",
    "-Wno-missing-noreturn",
    "-Wno-shift-sign-overflow",
    "-Wno-sign-conversion",
    "-Wno-undef",
    "-Wno-unused-member-function",
    "-Wno-used-but-marked-unused",
    "-Wno-zero-as-null-pointer-constant",
  ]
}

source_set("gtest") {
  testonly = true
  include_dirs = [ "googletest/googletest" ]
  configs -= [ "//build:extra_warnings" ]
  public_configs = [ ":googletest_config" ]
  all_dependent_configs = [ ":googletest_config" ]
  sources = [
    "googletest/googletest/src/gtest-all.cc",
  ]
}

source_set("gtest_main") {
  testonly = true
  configs -= [ "//build:extra_warnings" ]
  configs += [ ":googletest_config" ]
  sources = [
    "googletest/googletest/src/gtest_main.cc",
  ]
}

source_set("gmock") {
  testonly = true
  include_dirs = [ "googletest/googlemock" ]
  configs -= [ "//build:extra_warnings" ]
  public_configs = [ ":googletest_config" ]
  all_dependent_configs = [ ":googletest_config" ]
  sources = [
    "googletest/googlemock/src/gmock-all.cc",
  ]
}

# This config is applied to the autogenerated .pb.{cc,h} files in
# //build/proto_library.gni. This config is propagated up to the source sets
# that depend on generated proto headers. Therefore this should stay as lean and
# clean as possible in terms of -W-no* suppressions. Thankfully the
# autogenerated .pb.h headers violate less warnings than the libprotobuf_*
# library itself.
config("protobuf_gen_config") {
  visibility = [ ":*" ]
  defines = [
    "GOOGLE_PROTOBUF_NO_RTTI",
    "GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
  ]
  include_dirs = [ "protobuf/src" ]
  cflags = [
    "-Wno-deprecated",
    "-Wno-disabled-macro-expansion",
    "-Wno-int-to-void-pointer-cast",
    "-Wno-missing-variable-declarations",
    "-Wno-old-style-cast",
    "-Wno-shorten-64-to-32",
    "-Wno-sign-compare",
    "-Wno-sign-conversion",
    "-Wno-undef",
    "-Wno-zero-as-null-pointer-constant",
  ]
}

# Configuration used to build libprotobuf_* and the protoc compiler.
config("protobuf_config") {
  # Apply the lighter supressions and macro definitions from above.
  configs = [ ":protobuf_gen_config" ]

  visibility = [ ":*" ]
  defines = [ "HAVE_PTHREAD=1" ]
  cflags = [
    "-Wno-ignored-qualifiers",
    "-Wno-missing-noreturn",
    "-Wno-undef",
    "-Wno-unused-parameter",
    "-Wno-unused",
  ]
  if (is_clang) {
    cflags += [
      "-Wno-used-but-marked-unused",
      "-Wno-shift-sign-overflow",
      "-Wno-global-constructors",
    ]
  } else {
    cflags += [
      "-Wno-misleading-indentation",
      "-Wno-return-type",
    ]
  }
}

source_set("protobuf_lite") {
  sources = [
    "protobuf/src/google/protobuf/arena.cc",
    "protobuf/src/google/protobuf/arenastring.cc",
    "protobuf/src/google/protobuf/extension_set.cc",
    "protobuf/src/google/protobuf/generated_message_util.cc",
    "protobuf/src/google/protobuf/io/coded_stream.cc",
    "protobuf/src/google/protobuf/io/zero_copy_stream.cc",
    "protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc",
    "protobuf/src/google/protobuf/message_lite.cc",
    "protobuf/src/google/protobuf/repeated_field.cc",
    "protobuf/src/google/protobuf/stubs/atomicops_internals_x86_gcc.cc",
    "protobuf/src/google/protobuf/stubs/atomicops_internals_x86_msvc.cc",
    "protobuf/src/google/protobuf/stubs/bytestream.cc",
    "protobuf/src/google/protobuf/stubs/common.cc",
    "protobuf/src/google/protobuf/stubs/int128.cc",
    "protobuf/src/google/protobuf/stubs/once.cc",
    "protobuf/src/google/protobuf/stubs/status.cc",
    "protobuf/src/google/protobuf/stubs/statusor.cc",
    "protobuf/src/google/protobuf/stubs/stringpiece.cc",
    "protobuf/src/google/protobuf/stubs/stringprintf.cc",
    "protobuf/src/google/protobuf/stubs/structurally_valid.cc",
    "protobuf/src/google/protobuf/stubs/strutil.cc",
    "protobuf/src/google/protobuf/stubs/time.cc",
    "protobuf/src/google/protobuf/wire_format_lite.cc",
  ]
  configs -= [ "//build:extra_warnings" ]
  public_configs = [ ":protobuf_config" ]
}

source_set("protobuf_full") {
  deps += [ ":protobuf_lite" ]
  sources = [
    "protobuf/src/google/protobuf/any.cc",
    "protobuf/src/google/protobuf/any.pb.cc",
    "protobuf/src/google/protobuf/api.pb.cc",
    "protobuf/src/google/protobuf/compiler/importer.cc",
    "protobuf/src/google/protobuf/compiler/parser.cc",
    "protobuf/src/google/protobuf/descriptor.cc",
    "protobuf/src/google/protobuf/descriptor.pb.cc",
    "protobuf/src/google/protobuf/descriptor_database.cc",
    "protobuf/src/google/protobuf/duration.pb.cc",
    "protobuf/src/google/protobuf/dynamic_message.cc",
    "protobuf/src/google/protobuf/empty.pb.cc",
    "protobuf/src/google/protobuf/extension_set_heavy.cc",
    "protobuf/src/google/protobuf/field_mask.pb.cc",
    "protobuf/src/google/protobuf/generated_message_reflection.cc",
    "protobuf/src/google/protobuf/io/gzip_stream.cc",
    "protobuf/src/google/protobuf/io/printer.cc",
    "protobuf/src/google/protobuf/io/strtod.cc",
    "protobuf/src/google/protobuf/io/tokenizer.cc",
    "protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc",
    "protobuf/src/google/protobuf/map_field.cc",
    "protobuf/src/google/protobuf/message.cc",
    "protobuf/src/google/protobuf/reflection_ops.cc",
    "protobuf/src/google/protobuf/service.cc",
    "protobuf/src/google/protobuf/source_context.pb.cc",
    "protobuf/src/google/protobuf/struct.pb.cc",
    "protobuf/src/google/protobuf/stubs/mathlimits.cc",
    "protobuf/src/google/protobuf/stubs/substitute.cc",
    "protobuf/src/google/protobuf/text_format.cc",
    "protobuf/src/google/protobuf/timestamp.pb.cc",
    "protobuf/src/google/protobuf/type.pb.cc",
    "protobuf/src/google/protobuf/unknown_field_set.cc",
    "protobuf/src/google/protobuf/util/field_comparator.cc",
    "protobuf/src/google/protobuf/util/field_mask_util.cc",
    "protobuf/src/google/protobuf/util/internal/datapiece.cc",
    "protobuf/src/google/protobuf/util/internal/default_value_objectwriter.cc",
    "protobuf/src/google/protobuf/util/internal/error_listener.cc",
    "protobuf/src/google/protobuf/util/internal/field_mask_utility.cc",
    "protobuf/src/google/protobuf/util/internal/json_escaping.cc",
    "protobuf/src/google/protobuf/util/internal/json_objectwriter.cc",
    "protobuf/src/google/protobuf/util/internal/json_stream_parser.cc",
    "protobuf/src/google/protobuf/util/internal/object_writer.cc",
    "protobuf/src/google/protobuf/util/internal/proto_writer.cc",
    "protobuf/src/google/protobuf/util/internal/protostream_objectsource.cc",
    "protobuf/src/google/protobuf/util/internal/protostream_objectwriter.cc",
    "protobuf/src/google/protobuf/util/internal/type_info.cc",
    "protobuf/src/google/protobuf/util/internal/type_info_test_helper.cc",
    "protobuf/src/google/protobuf/util/internal/utility.cc",
    "protobuf/src/google/protobuf/util/json_util.cc",
    "protobuf/src/google/protobuf/util/message_differencer.cc",
    "protobuf/src/google/protobuf/util/time_util.cc",
    "protobuf/src/google/protobuf/util/type_resolver_util.cc",
    "protobuf/src/google/protobuf/wire_format.cc",
    "protobuf/src/google/protobuf/wrappers.pb.cc",
  ]
  configs -= [ "//build:extra_warnings" ]
  public_configs = [ ":protobuf_config" ]
}

if (current_toolchain == host_toolchain) {
  source_set("protoc_lib") {
    deps += [ ":protobuf_full" ]
    sources = [
      "protobuf/src/google/protobuf/compiler/code_generator.cc",
      "protobuf/src/google/protobuf/compiler/command_line_interface.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_enum.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_enum_field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_extension.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_file.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_generator.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_helpers.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_map_field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_message.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_message_field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_primitive_field.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_service.cc",
      "protobuf/src/google/protobuf/compiler/cpp/cpp_string_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_doc_comment.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_enum.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_enum_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_field_base.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_generator.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_helpers.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_map_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_message.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_message_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_primitive_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_reflection_class.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_repeated_enum_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_repeated_message_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_repeated_primitive_field.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_source_generator_base.cc",
      "protobuf/src/google/protobuf/compiler/csharp/csharp_wrapper_field.cc",
      "protobuf/src/google/protobuf/compiler/java/java_context.cc",
      "protobuf/src/google/protobuf/compiler/java/java_doc_comment.cc",
      "protobuf/src/google/protobuf/compiler/java/java_enum.cc",
      "protobuf/src/google/protobuf/compiler/java/java_enum_field.cc",
      "protobuf/src/google/protobuf/compiler/java/java_enum_field_lite.cc",
      "protobuf/src/google/protobuf/compiler/java/java_enum_lite.cc",
      "protobuf/src/google/protobuf/compiler/java/java_extension.cc",
      "protobuf/src/google/protobuf/compiler/java/java_extension_lite.cc",
      "protobuf/src/google/protobuf/compiler/java/java_field.cc",
      "protobuf/src/google/protobuf/compiler/java/java_file.cc",
      "protobuf/src/google/protobuf/compiler/java/java_generator.cc",
      "protobuf/src/google/protobuf/compiler/java/java_generator_factory.cc",
      "protobuf/src/google/protobuf/compiler/java/java_helpers.cc",
      "protobuf/src/google/protobuf/compiler/java/java_lazy_message_field.cc",
      "protobuf/src/google/protobuf/compiler/java/java_lazy_message_field_lite.cc",
      "protobuf/src/google/protobuf/compiler/java/java_map_field.cc",
      "protobuf/src/google/protobuf/compiler/java/java_map_field_lite.cc",
      "protobuf/src/google/protobuf/compiler/java/java_message.cc",
      "protobuf/src/google/protobuf/compiler/java/java_message_builder.cc",
      "protobuf/src/google/protobuf/compiler/java/java_message_builder_lite.cc",
      "protobuf/src/google/protobuf/compiler/java/java_message_field.cc",
      "protobuf/src/google/protobuf/compiler/java/java_message_field_lite.cc",
      "protobuf/src/google/protobuf/compiler/java/java_message_lite.cc",
      "protobuf/src/google/protobuf/compiler/java/java_name_resolver.cc",
      "protobuf/src/google/protobuf/compiler/java/java_primitive_field.cc",
      "protobuf/src/google/protobuf/compiler/java/java_primitive_field_lite.cc",
      "protobuf/src/google/protobuf/compiler/java/java_service.cc",
      "protobuf/src/google/protobuf/compiler/java/java_shared_code_generator.cc",
      "protobuf/src/google/protobuf/compiler/java/java_string_field.cc",
      "protobuf/src/google/protobuf/compiler/java/java_string_field_lite.cc",
      "protobuf/src/google/protobuf/compiler/javanano/javanano_enum.cc",
      "protobuf/src/google/protobuf/compiler/javanano/javanano_enum_field.cc",
      "protobuf/src/google/protobuf/compiler/javanano/javanano_extension.cc",
      "protobuf/src/google/protobuf/compiler/javanano/javanano_field.cc",
      "protobuf/src/google/protobuf/compiler/javanano/javanano_file.cc",
      "protobuf/src/google/protobuf/compiler/javanano/javanano_generator.cc",
      "protobuf/src/google/protobuf/compiler/javanano/javanano_helpers.cc",
      "protobuf/src/google/protobuf/compiler/javanano/javanano_map_field.cc",
      "protobuf/src/google/protobuf/compiler/javanano/javanano_message.cc",
      "protobuf/src/google/protobuf/compiler/javanano/javanano_message_field.cc",
      "protobuf/src/google/protobuf/compiler/javanano/javanano_primitive_field.cc",
      "protobuf/src/google/protobuf/compiler/js/js_generator.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/objectivec_enum.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/objectivec_enum_field.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/objectivec_extension.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/objectivec_field.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/objectivec_file.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/objectivec_generator.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/objectivec_helpers.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/objectivec_map_field.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/objectivec_message.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/objectivec_message_field.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/objectivec_oneof.cc",
      "protobuf/src/google/protobuf/compiler/objectivec/objectivec_primitive_field.cc",
      "protobuf/src/google/protobuf/compiler/plugin.cc",
      "protobuf/src/google/protobuf/compiler/plugin.pb.cc",
      "protobuf/src/google/protobuf/compiler/python/python_generator.cc",
      "protobuf/src/google/protobuf/compiler/ruby/ruby_generator.cc",
      "protobuf/src/google/protobuf/compiler/subprocess.cc",
      "protobuf/src/google/protobuf/compiler/zip_writer.cc",
    ]
    configs -= [ "//build:extra_warnings" ]
    public_configs = [ ":protobuf_config" ]
  }

  executable("protoc") {
    deps += [ ":protoc_lib" ]
    sources = [
      "protobuf/src/google/protobuf/compiler/main.cc",
    ]
    configs -= [ "//build:extra_warnings" ]
  }
}  # host_toolchain

if (use_custom_libcxx) {
  # Config applied to both libc++ and libc++abi targets below.
  config("libc++config") {
    defines = [
      "LIBCXX_BUILDING_LIBCXXABI",
      "_LIBCXXABI_NO_EXCEPTIONS",
      "_LIBCPP_OVERRIDABLE_FUNC_VIS=__attribute__((__visibility__(\"default\")))",
    ]
    cflags = [
      "-fPIC",
      "-fstrict-aliasing",
    ]
  }

  source_set("libc++abi") {
    sources = [
      "libcxxabi/src/abort_message.cpp",
      "libcxxabi/src/cxa_aux_runtime.cpp",
      "libcxxabi/src/cxa_default_handlers.cpp",
      "libcxxabi/src/cxa_demangle.cpp",
      "libcxxabi/src/cxa_exception.cpp",
      "libcxxabi/src/cxa_exception_storage.cpp",
      "libcxxabi/src/cxa_guard.cpp",
      "libcxxabi/src/cxa_handlers.cpp",
      "libcxxabi/src/cxa_personality.cpp",
      "libcxxabi/src/cxa_unexpected.cpp",
      "libcxxabi/src/cxa_vector.cpp",
      "libcxxabi/src/cxa_virtual.cpp",
      "libcxxabi/src/fallback_malloc.cpp",
      "libcxxabi/src/private_typeinfo.cpp",
      "libcxxabi/src/stdlib_exception.cpp",
      "libcxxabi/src/stdlib_stdexcept.cpp",
      "libcxxabi/src/stdlib_typeinfo.cpp",
    ]

    # On linux this seems to introduce an unwanted glibc 2.18 dependency.
    if (is_android) {
      sources += [ "libcxxabi/src/cxa_thread_atexit.cpp" ]
    }
    configs -= [
      "//build:extra_warnings",
      "//build:no_exceptions",
      "//build:no_rtti",
    ]
    configs += [
      ":libc++config",
      "//build/sanitizers:sanitizer_options_link_helper",
    ]
  }

  source_set("libc++") {
    sources = [
      "libcxx/src/algorithm.cpp",
      "libcxx/src/any.cpp",
      "libcxx/src/bind.cpp",
      "libcxx/src/chrono.cpp",
      "libcxx/src/condition_variable.cpp",
      "libcxx/src/debug.cpp",
      "libcxx/src/exception.cpp",
      "libcxx/src/functional.cpp",
      "libcxx/src/future.cpp",
      "libcxx/src/hash.cpp",
      "libcxx/src/ios.cpp",
      "libcxx/src/iostream.cpp",
      "libcxx/src/locale.cpp",
      "libcxx/src/memory.cpp",
      "libcxx/src/mutex.cpp",
      "libcxx/src/new.cpp",
      "libcxx/src/optional.cpp",
      "libcxx/src/random.cpp",
      "libcxx/src/regex.cpp",
      "libcxx/src/shared_mutex.cpp",
      "libcxx/src/stdexcept.cpp",
      "libcxx/src/string.cpp",
      "libcxx/src/strstream.cpp",
      "libcxx/src/system_error.cpp",
      "libcxx/src/thread.cpp",
      "libcxx/src/typeinfo.cpp",
      "libcxx/src/utility.cpp",
      "libcxx/src/valarray.cpp",
      "libcxx/src/variant.cpp",
    ]
    configs -= [
      "//build:extra_warnings",
      "//build:no_exceptions",
      "//build:no_rtti",
    ]
    configs += [
      ":libc++config",
      "//build/sanitizers:sanitizer_options_link_helper",
    ]
    defines = [ "_LIBCPP_BUILDING_LIBRARY" ]
    deps = [
      ":libc++abi",
    ]
  }
}  # if (use_custom_libcxx)

config("benchmark_config") {
  visibility = [ ":*" ]
  include_dirs = [ "benchmark/include" ]
  cflags = [
    "-Wno-global-constructors",
    "-Wno-covered-switch-default",
  ]
}

source_set("benchmark") {
  testonly = true
  sources = [
    "benchmark/include/benchmark/benchmark.h",
    "benchmark/include/benchmark/benchmark_api.h",
    "benchmark/include/benchmark/reporter.h",
    "benchmark/src/arraysize.h",
    "benchmark/src/benchmark.cc",
    "benchmark/src/benchmark_api_internal.h",
    "benchmark/src/benchmark_register.cc",
    "benchmark/src/check.h",
    "benchmark/src/colorprint.cc",
    "benchmark/src/colorprint.h",
    "benchmark/src/commandlineflags.cc",
    "benchmark/src/commandlineflags.h",
    "benchmark/src/complexity.cc",
    "benchmark/src/complexity.h",
    "benchmark/src/console_reporter.cc",
    "benchmark/src/counter.cc",
    "benchmark/src/counter.h",
    "benchmark/src/csv_reporter.cc",
    "benchmark/src/cycleclock.h",
    "benchmark/src/internal_macros.h",
    "benchmark/src/json_reporter.cc",
    "benchmark/src/log.h",
    "benchmark/src/mutex.h",
    "benchmark/src/re.h",
    "benchmark/src/reporter.cc",
    "benchmark/src/sleep.cc",
    "benchmark/src/sleep.h",
    "benchmark/src/stat.h",
    "benchmark/src/string_util.cc",
    "benchmark/src/string_util.h",
    "benchmark/src/sysinfo.cc",
    "benchmark/src/sysinfo.h",
    "benchmark/src/timers.cc",
    "benchmark/src/timers.h",
  ]
  defines = [ "HAVE_POSIX_REGEX" ]
  public_configs = [ ":benchmark_config" ]
  all_dependent_configs = [ ":benchmark_config" ]
  configs -= [ "//build:extra_warnings" ]
}

source_set("zlib") {
  sources = [
    "zlib/adler32.c",
    "zlib/crc32.c",
    "zlib/deflate.c",
    "zlib/infback.c",
    "zlib/inffast.c",
    "zlib/inflate.c",
    "zlib/inftrees.c",
    "zlib/trees.c",
    "zlib/zutil.c",
  ]
  configs -= [ "//build:extra_warnings" ]
}

config("grpc_config") {
  include_dirs = [
    "grpc",
    "grpc/include"
  ]
}

config("grpc_gen_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "grpc",
    "grpc/include"
  ]
}

source_set("grpc") {
  public_configs = [ ":grpc_config" ]
  sources = [
    # gpr
    "grpc/src/core/lib/profiling/basic_timers.c",
    "grpc/src/core/lib/profiling/stap_timers.c",
    "grpc/src/core/lib/support/alloc.c",
    "grpc/src/core/lib/support/arena.c",
    "grpc/src/core/lib/support/atm.c",
    "grpc/src/core/lib/support/avl.c",
    "grpc/src/core/lib/support/backoff.c",
    "grpc/src/core/lib/support/cmdline.c",
    "grpc/src/core/lib/support/cpu_iphone.c",
    "grpc/src/core/lib/support/cpu_linux.c",
    "grpc/src/core/lib/support/cpu_posix.c",
    "grpc/src/core/lib/support/cpu_windows.c",
    "grpc/src/core/lib/support/env_linux.c",
    "grpc/src/core/lib/support/env_posix.c",
    "grpc/src/core/lib/support/env_windows.c",
    "grpc/src/core/lib/support/histogram.c",
    "grpc/src/core/lib/support/host_port.c",
    "grpc/src/core/lib/support/log.c",
    "grpc/src/core/lib/support/log_android.c",
    "grpc/src/core/lib/support/log_linux.c",
    "grpc/src/core/lib/support/log_posix.c",
    "grpc/src/core/lib/support/log_windows.c",
    "grpc/src/core/lib/support/mpscq.c",
    "grpc/src/core/lib/support/murmur_hash.c",
    "grpc/src/core/lib/support/stack_lockfree.c",
    "grpc/src/core/lib/support/string.c",
    "grpc/src/core/lib/support/string_posix.c",
    "grpc/src/core/lib/support/string_util_windows.c",
    "grpc/src/core/lib/support/string_windows.c",
    "grpc/src/core/lib/support/subprocess_posix.c",
    "grpc/src/core/lib/support/subprocess_windows.c",
    "grpc/src/core/lib/support/sync.c",
    "grpc/src/core/lib/support/sync_posix.c",
    "grpc/src/core/lib/support/sync_windows.c",
    "grpc/src/core/lib/support/thd.c",
    "grpc/src/core/lib/support/thd_posix.c",
    "grpc/src/core/lib/support/thd_windows.c",
    "grpc/src/core/lib/support/time.c",
    "grpc/src/core/lib/support/time_posix.c",
    "grpc/src/core/lib/support/time_precise.c",
    "grpc/src/core/lib/support/time_windows.c",
    "grpc/src/core/lib/support/tls_pthread.c",
    "grpc/src/core/lib/support/tmpfile_msys.c",
    "grpc/src/core/lib/support/tmpfile_posix.c",
    "grpc/src/core/lib/support/tmpfile_windows.c",
    "grpc/src/core/lib/support/wrap_memcpy.c",

    # grpc_unsecure
    "grpc/src/core/lib/surface/init.c",
    "grpc/src/core/lib/surface/init_unsecure.c",
    "grpc/src/core/lib/channel/channel_args.c",
    "grpc/src/core/lib/channel/channel_stack.c",
    "grpc/src/core/lib/channel/channel_stack_builder.c",
    "grpc/src/core/lib/channel/connected_channel.c",
    "grpc/src/core/lib/channel/handshaker.c",
    "grpc/src/core/lib/channel/handshaker_factory.c",
    "grpc/src/core/lib/channel/handshaker_registry.c",
    "grpc/src/core/lib/compression/compression.c",
    "grpc/src/core/lib/compression/message_compress.c",
    "grpc/src/core/lib/compression/stream_compression.c",
    "grpc/src/core/lib/http/format_request.c",
    "grpc/src/core/lib/http/httpcli.c",
    "grpc/src/core/lib/http/parser.c",
    "grpc/src/core/lib/iomgr/closure.c",
    "grpc/src/core/lib/iomgr/combiner.c",
    "grpc/src/core/lib/iomgr/endpoint.c",
    "grpc/src/core/lib/iomgr/endpoint_pair_posix.c",
    "grpc/src/core/lib/iomgr/endpoint_pair_uv.c",
    "grpc/src/core/lib/iomgr/endpoint_pair_windows.c",
    "grpc/src/core/lib/iomgr/error.c",
    "grpc/src/core/lib/iomgr/ev_epoll1_linux.c",
    "grpc/src/core/lib/iomgr/ev_epoll_limited_pollers_linux.c",
    "grpc/src/core/lib/iomgr/ev_epoll_thread_pool_linux.c",
    "grpc/src/core/lib/iomgr/ev_epollex_linux.c",
    "grpc/src/core/lib/iomgr/ev_epollsig_linux.c",
    "grpc/src/core/lib/iomgr/ev_poll_posix.c",
    "grpc/src/core/lib/iomgr/ev_posix.c",
    "grpc/src/core/lib/iomgr/ev_windows.c",
    "grpc/src/core/lib/iomgr/exec_ctx.c",
    "grpc/src/core/lib/iomgr/executor.c",
    "grpc/src/core/lib/iomgr/gethostname_fallback.c",
    "grpc/src/core/lib/iomgr/gethostname_host_name_max.c",
    "grpc/src/core/lib/iomgr/gethostname_sysconf.c",
    "grpc/src/core/lib/iomgr/iocp_windows.c",
    "grpc/src/core/lib/iomgr/iomgr.c",
    "grpc/src/core/lib/iomgr/iomgr_posix.c",
    "grpc/src/core/lib/iomgr/iomgr_uv.c",
    "grpc/src/core/lib/iomgr/iomgr_windows.c",
    "grpc/src/core/lib/iomgr/is_epollexclusive_available.c",
    "grpc/src/core/lib/iomgr/load_file.c",
    "grpc/src/core/lib/iomgr/lockfree_event.c",
    "grpc/src/core/lib/iomgr/network_status_tracker.c",
    "grpc/src/core/lib/iomgr/polling_entity.c",
    "grpc/src/core/lib/iomgr/pollset_set_uv.c",
    "grpc/src/core/lib/iomgr/pollset_set_windows.c",
    "grpc/src/core/lib/iomgr/pollset_uv.c",
    "grpc/src/core/lib/iomgr/pollset_windows.c",
    "grpc/src/core/lib/iomgr/resolve_address_posix.c",
    "grpc/src/core/lib/iomgr/resolve_address_uv.c",
    "grpc/src/core/lib/iomgr/resolve_address_windows.c",
    "grpc/src/core/lib/iomgr/resource_quota.c",
    "grpc/src/core/lib/iomgr/sockaddr_utils.c",
    "grpc/src/core/lib/iomgr/socket_factory_posix.c",
    "grpc/src/core/lib/iomgr/socket_mutator.c",
    "grpc/src/core/lib/iomgr/socket_utils_common_posix.c",
    "grpc/src/core/lib/iomgr/socket_utils_linux.c",
    "grpc/src/core/lib/iomgr/socket_utils_posix.c",
    "grpc/src/core/lib/iomgr/socket_utils_uv.c",
    "grpc/src/core/lib/iomgr/socket_utils_windows.c",
    "grpc/src/core/lib/iomgr/socket_windows.c",
    "grpc/src/core/lib/iomgr/tcp_client_posix.c",
    "grpc/src/core/lib/iomgr/tcp_client_uv.c",
    "grpc/src/core/lib/iomgr/tcp_client_windows.c",
    "grpc/src/core/lib/iomgr/tcp_posix.c",
    "grpc/src/core/lib/iomgr/tcp_server_posix.c",
    "grpc/src/core/lib/iomgr/tcp_server_utils_posix_common.c",
    "grpc/src/core/lib/iomgr/tcp_server_utils_posix_ifaddrs.c",
    "grpc/src/core/lib/iomgr/tcp_server_utils_posix_noifaddrs.c",
    "grpc/src/core/lib/iomgr/tcp_server_uv.c",
    "grpc/src/core/lib/iomgr/tcp_server_windows.c",
    "grpc/src/core/lib/iomgr/tcp_uv.c",
    "grpc/src/core/lib/iomgr/tcp_windows.c",
    "grpc/src/core/lib/iomgr/time_averaged_stats.c",
    "grpc/src/core/lib/iomgr/timer_generic.c",
    "grpc/src/core/lib/iomgr/timer_heap.c",
    "grpc/src/core/lib/iomgr/timer_manager.c",
    "grpc/src/core/lib/iomgr/timer_uv.c",
    "grpc/src/core/lib/iomgr/udp_server.c",
    "grpc/src/core/lib/iomgr/unix_sockets_posix.c",
    "grpc/src/core/lib/iomgr/unix_sockets_posix_noop.c",
    "grpc/src/core/lib/iomgr/wakeup_fd_cv.c",
    "grpc/src/core/lib/iomgr/wakeup_fd_eventfd.c",
    "grpc/src/core/lib/iomgr/wakeup_fd_nospecial.c",
    "grpc/src/core/lib/iomgr/wakeup_fd_pipe.c",
    "grpc/src/core/lib/iomgr/wakeup_fd_posix.c",
    "grpc/src/core/lib/json/json.c",
    "grpc/src/core/lib/json/json_reader.c",
    "grpc/src/core/lib/json/json_string.c",
    "grpc/src/core/lib/json/json_writer.c",
    "grpc/src/core/lib/slice/b64.c",
    "grpc/src/core/lib/slice/percent_encoding.c",
    "grpc/src/core/lib/slice/slice.c",
    "grpc/src/core/lib/slice/slice_buffer.c",
    "grpc/src/core/lib/slice/slice_hash_table.c",
    "grpc/src/core/lib/slice/slice_intern.c",
    "grpc/src/core/lib/slice/slice_string_helpers.c",
    "grpc/src/core/lib/surface/alarm.c",
    "grpc/src/core/lib/surface/api_trace.c",
    "grpc/src/core/lib/surface/byte_buffer.c",
    "grpc/src/core/lib/surface/byte_buffer_reader.c",
    "grpc/src/core/lib/surface/call.c",
    "grpc/src/core/lib/surface/call_details.c",
    "grpc/src/core/lib/surface/call_log_batch.c",
    "grpc/src/core/lib/surface/channel.c",
    "grpc/src/core/lib/surface/channel_init.c",
    "grpc/src/core/lib/surface/channel_ping.c",
    "grpc/src/core/lib/surface/channel_stack_type.c",
    "grpc/src/core/lib/surface/completion_queue.c",
    "grpc/src/core/lib/surface/completion_queue_factory.c",
    "grpc/src/core/lib/surface/event_string.c",
    "grpc/src/core/lib/surface/lame_client.cc",
    "grpc/src/core/lib/surface/metadata_array.c",
    "grpc/src/core/lib/surface/server.c",
    "grpc/src/core/lib/surface/validate_metadata.c",
    "grpc/src/core/lib/surface/version.c",
    "grpc/src/core/lib/transport/bdp_estimator.c",
    "grpc/src/core/lib/transport/byte_stream.c",
    "grpc/src/core/lib/transport/connectivity_state.c",
    "grpc/src/core/lib/transport/error_utils.c",
    "grpc/src/core/lib/transport/metadata.c",
    "grpc/src/core/lib/transport/metadata_batch.c",
    "grpc/src/core/lib/transport/pid_controller.c",
    "grpc/src/core/lib/transport/service_config.c",
    "grpc/src/core/lib/transport/static_metadata.c",
    "grpc/src/core/lib/transport/status_conversion.c",
    "grpc/src/core/lib/transport/timeout_encoding.c",
    "grpc/src/core/lib/transport/transport.c",
    "grpc/src/core/lib/transport/transport_op_string.c",
    "grpc/src/core/lib/debug/trace.c",
    "grpc/src/core/ext/transport/chttp2/server/insecure/server_chttp2.c",
    "grpc/src/core/ext/transport/chttp2/server/insecure/server_chttp2_posix.c",
    "grpc/src/core/ext/transport/chttp2/transport/bin_decoder.c",
    "grpc/src/core/ext/transport/chttp2/transport/bin_encoder.c",
    "grpc/src/core/ext/transport/chttp2/transport/chttp2_plugin.c",
    "grpc/src/core/ext/transport/chttp2/transport/chttp2_transport.c",
    "grpc/src/core/ext/transport/chttp2/transport/flow_control.c",
    "grpc/src/core/ext/transport/chttp2/transport/frame_data.c",
    "grpc/src/core/ext/transport/chttp2/transport/frame_goaway.c",
    "grpc/src/core/ext/transport/chttp2/transport/frame_ping.c",
    "grpc/src/core/ext/transport/chttp2/transport/frame_rst_stream.c",
    "grpc/src/core/ext/transport/chttp2/transport/frame_settings.c",
    "grpc/src/core/ext/transport/chttp2/transport/frame_window_update.c",
    "grpc/src/core/ext/transport/chttp2/transport/hpack_encoder.c",
    "grpc/src/core/ext/transport/chttp2/transport/hpack_parser.c",
    "grpc/src/core/ext/transport/chttp2/transport/hpack_table.c",
    "grpc/src/core/ext/transport/chttp2/transport/http2_settings.c",
    "grpc/src/core/ext/transport/chttp2/transport/huffsyms.c",
    "grpc/src/core/ext/transport/chttp2/transport/incoming_metadata.c",
    "grpc/src/core/ext/transport/chttp2/transport/parsing.c",
    "grpc/src/core/ext/transport/chttp2/transport/stream_lists.c",
    "grpc/src/core/ext/transport/chttp2/transport/stream_map.c",
    "grpc/src/core/ext/transport/chttp2/transport/varint.c",
    "grpc/src/core/ext/transport/chttp2/transport/writing.c",
    "grpc/src/core/ext/transport/chttp2/alpn/alpn.c",
    "grpc/src/core/ext/filters/http/client/http_client_filter.c",
    "grpc/src/core/ext/filters/http/http_filters_plugin.c",
    "grpc/src/core/ext/filters/http/message_compress/message_compress_filter.c",
    "grpc/src/core/ext/filters/http/server/http_server_filter.c",
    "grpc/src/core/ext/transport/chttp2/server/chttp2_server.c",
    "grpc/src/core/ext/transport/chttp2/client/insecure/channel_create.c",
    "grpc/src/core/ext/transport/chttp2/client/insecure/channel_create_posix.c",
    "grpc/src/core/ext/transport/chttp2/client/chttp2_connector.c",
    "grpc/src/core/ext/filters/client_channel/channel_connectivity.c",
    "grpc/src/core/ext/filters/client_channel/client_channel.c",
    "grpc/src/core/ext/filters/client_channel/client_channel_factory.c",
    "grpc/src/core/ext/filters/client_channel/client_channel_plugin.c",
    "grpc/src/core/ext/filters/client_channel/connector.c",
    "grpc/src/core/ext/filters/client_channel/http_connect_handshaker.c",
    "grpc/src/core/ext/filters/client_channel/http_proxy.c",
    "grpc/src/core/ext/filters/client_channel/lb_policy.c",
    "grpc/src/core/ext/filters/client_channel/lb_policy_factory.c",
    "grpc/src/core/ext/filters/client_channel/lb_policy_registry.c",
    "grpc/src/core/ext/filters/client_channel/parse_address.c",
    "grpc/src/core/ext/filters/client_channel/proxy_mapper.c",
    "grpc/src/core/ext/filters/client_channel/proxy_mapper_registry.c",
    "grpc/src/core/ext/filters/client_channel/resolver.c",
    "grpc/src/core/ext/filters/client_channel/resolver_factory.c",
    "grpc/src/core/ext/filters/client_channel/resolver_registry.c",
    "grpc/src/core/ext/filters/client_channel/retry_throttle.c",
    "grpc/src/core/ext/filters/client_channel/subchannel.c",
    "grpc/src/core/ext/filters/client_channel/subchannel_index.c",
    "grpc/src/core/ext/filters/client_channel/uri_parser.c",
    "grpc/src/core/ext/filters/deadline/deadline_filter.c",
    "grpc/src/core/ext/transport/inproc/inproc_plugin.c",
    "grpc/src/core/ext/transport/inproc/inproc_transport.c",
    "grpc/src/core/ext/filters/client_channel/resolver/dns/c_ares/dns_resolver_ares.c",
    "grpc/src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_ev_driver_posix.c",
    "grpc/src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper.c",
    "grpc/src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper_fallback.c",
    "grpc/src/core/ext/filters/client_channel/resolver/dns/native/dns_resolver.c",
    "grpc/src/core/ext/filters/client_channel/resolver/sockaddr/sockaddr_resolver.c",
    "grpc/src/core/ext/filters/client_channel/resolver/fake/fake_resolver.c",
    "grpc/src/core/ext/filters/load_reporting/load_reporting.c",
    "grpc/src/core/ext/filters/load_reporting/load_reporting_filter.c",
    "grpc/src/core/ext/filters/client_channel/lb_policy/grpclb/client_load_reporting_filter.c",
    "grpc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.c",
    "grpc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_channel.c",
    "grpc/src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_client_stats.c",
    "grpc/src/core/ext/filters/client_channel/lb_policy/grpclb/load_balancer_api.c",
    "grpc/src/core/ext/filters/client_channel/lb_policy/grpclb/proto/grpc/lb/v1/load_balancer.pb.c",
    "grpc/third_party/nanopb/pb_common.c",
    "grpc/third_party/nanopb/pb_decode.c",
    "grpc/third_party/nanopb/pb_encode.c",
    "grpc/src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.c",
    "grpc/src/core/ext/filters/client_channel/lb_policy/round_robin/round_robin.c",
    "grpc/src/core/ext/census/base_resources.c",
    "grpc/src/core/ext/census/context.c",
    "grpc/src/core/ext/census/gen/census.pb.c",
    "grpc/src/core/ext/census/gen/trace_context.pb.c",
    "grpc/src/core/ext/census/grpc_context.c",
    "grpc/src/core/ext/census/grpc_filter.c",
    "grpc/src/core/ext/census/grpc_plugin.c",
    "grpc/src/core/ext/census/initialize.c",
    "grpc/src/core/ext/census/intrusive_hash_map.c",
    "grpc/src/core/ext/census/mlog.c",
    "grpc/src/core/ext/census/operation.c",
    "grpc/src/core/ext/census/placeholders.c",
    "grpc/src/core/ext/census/resource.c",
    "grpc/src/core/ext/census/trace_context.c",
    "grpc/src/core/ext/census/tracing.c",
    "grpc/src/core/ext/filters/max_age/max_age_filter.c",
    "grpc/src/core/ext/filters/message_size/message_size_filter.c",
    "grpc/src/core/ext/filters/workarounds/workaround_cronet_compression_filter.c",
    "grpc/src/core/ext/filters/workarounds/workaround_utils.c",
    "grpc/src/core/plugin_registry/grpc_unsecure_plugin_registry.c",

    # gprc++_unsecure
    "grpc/src/cpp/client/insecure_credentials.cc",
    "grpc/src/cpp/common/insecure_create_auth_context.cc",
    "grpc/src/cpp/server/insecure_server_credentials.cc",
    "grpc/src/cpp/client/channel_cc.cc",
    "grpc/src/cpp/client/client_context.cc",
    "grpc/src/cpp/client/create_channel.cc",
    "grpc/src/cpp/client/create_channel_internal.cc",
    "grpc/src/cpp/client/create_channel_posix.cc",
    "grpc/src/cpp/client/credentials_cc.cc",
    "grpc/src/cpp/client/generic_stub.cc",
    "grpc/src/cpp/common/channel_arguments.cc",
    "grpc/src/cpp/common/channel_filter.cc",
    "grpc/src/cpp/common/completion_queue_cc.cc",
    "grpc/src/cpp/common/core_codegen.cc",
    "grpc/src/cpp/common/resource_quota_cc.cc",
    "grpc/src/cpp/common/rpc_method.cc",
    "grpc/src/cpp/common/version_cc.cc",
    "grpc/src/cpp/server/async_generic_service.cc",
    "grpc/src/cpp/server/channel_argument_option.cc",
    "grpc/src/cpp/server/create_default_thread_pool.cc",
    "grpc/src/cpp/server/dynamic_thread_pool.cc",
    "grpc/src/cpp/server/health/default_health_check_service.cc",
    "grpc/src/cpp/server/health/health.pb.c",
    "grpc/src/cpp/server/health/health_check_service.cc",
    "grpc/src/cpp/server/health/health_check_service_server_builder_option.cc",
    "grpc/src/cpp/server/server_builder.cc",
    "grpc/src/cpp/server/server_cc.cc",
    "grpc/src/cpp/server/server_context.cc",
    "grpc/src/cpp/server/server_credentials.cc",
    "grpc/src/cpp/server/server_posix.cc",
    "grpc/src/cpp/thread_manager/thread_manager.cc",
    "grpc/src/cpp/util/byte_buffer_cc.cc",
    "grpc/src/cpp/util/slice_cc.cc",
    "grpc/src/cpp/util/status.cc",
    "grpc/src/cpp/util/string_ref.cc",
    "grpc/src/cpp/util/time_cc.cc",
    "grpc/src/cpp/codegen/codegen_init.cc",
  ]
  defines = [ "GRPC_ARES=0" ]
  configs -= [ "//build:extra_warnings" ]
}

if (current_toolchain == host_toolchain) {
  executable("protoc_grpc_plugin") {
    sources = [
      "grpc/src/compiler/cpp_plugin.cc",
    ]
    configs += [ ":grpc_config" ]
    deps += [ ":protoc_lib" ]
    configs -= [ "//build:extra_warnings" ]
  }
}

template("grpc_library") {
  proto_library(target_name) {
    generator_plugin_label = "//buildtools/grpc_protoc_plugin"
    generator_plugin_suffix = ".grpc.pb"
    forward_variables_from(invoker,
                           [
                             "defines",
                             "include_dirs",
                             "proto_in_dir",
                             "proto_out_dir",
                             "sources",
                             "testonly",
                             "visibility",
                           ])
  }
}

executable("grpc_test") {
  deps += [
    ":grpc",
    ":zlib",
    ":grpc_test_messages",
    # TODO(skyostil): Can we use lite here?
    "//buildtools:protobuf_full",
  ]
  sources = [
    "grpc_test.cc"
  ]
  configs -= [ "//build:extra_warnings" ]
}

grpc_library("grpc_test_messages") {
  sources = [
    "helloworld.proto",
  ]
  proto_in_dir = "."
}
